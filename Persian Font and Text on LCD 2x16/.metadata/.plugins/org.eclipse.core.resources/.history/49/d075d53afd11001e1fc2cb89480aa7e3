/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

#include "lcd.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  /* USER CODE BEGIN 2 */

	Lcd_PortType ports[] = {
			GPIOA, GPIOA, GPIOA, GPIOA
	};

	Lcd_PinType pins[] = {GPIO_PIN_3, GPIO_PIN_4, GPIO_PIN_5, GPIO_PIN_6};

	Lcd_HandleTypeDef lcd = Lcd_create(ports, pins, GPIOA, GPIO_PIN_0, GPIOA, GPIO_PIN_2, LCD_4_BIT_MODE);
	Lcd_init(&lcd);

	int switcher = 0;

	if (switcher){
		uint8_t S[] = {0x00, 0x00, 0x15, 0x15, 0x1F, 0x00, 0x00, 0x00};
		uint8_t L[] = {0x00, 0x04,
				  0x04,
				  0x04,
				  0x1F,
				  0x00,
				  0x00,
				  0x008};
		uint8_t A[] = {0x04, 0x04, 0x04, 0x04, 0x07, 0x00, 0x00, 0x00};
		uint8_t M[] = {0x00, 0x01, 0x01, 0x01, 0x1F, 0x00, 0x0A, 0x00};

		Lcd_cursor(&lcd, 0, 0);
		Lcd_string(&lcd, "Pouria Amini !");
		Lcd_define_char(&lcd, 1, S);
		Lcd_define_char(&lcd, 2, L);
		Lcd_define_char(&lcd, 3, A);
		Lcd_define_char(&lcd, 4, M);

		Lcd_cursor(&lcd, 1, 0);
		lcd_write_data(&lcd, 4);
		lcd_write_data(&lcd, 3);
		lcd_write_data(&lcd, 2);
		lcd_write_data(&lcd, 1);

	} else {
		uint8_t P[] = {0x00, 0x01, 0x01, 0x01, 0x1F, 0x0A, 0x04, 0x00};
		uint8_t U[] = {0x00, 0x1E, 0x12, 0x12, 0x1F, 0x02, 0x04, 0x18};
		uint8_t R[] = {0x00, 0x00, 0x01, 0x01, 0x03, 0x06, 0x0C, 0x18};
		uint8_t I[] = {0x00, 0x01, 0x01, 0x01, 0x1F, 0x00, 0x0A, 0x00};
		uint8_t A[] = {0x04, 0x04, 0x04, 0x04, 0x07, 0x00, 0x00, 0x00};

		Lcd_cursor(&lcd, 0, 0);
		Lcd_string(&lcd, "Pouria Amini !");
		Lcd_define_char(&lcd, 1, P);
		Lcd_define_char(&lcd, 2, U);
		Lcd_define_char(&lcd, 3, R);
		Lcd_define_char(&lcd, 4, I);
		Lcd_define_char(&lcd, 5, A);

		Lcd_cursor(&lcd, 1, 0);
		lcd_write_data(&lcd, 5);
		lcd_write_data(&lcd, 4);
		lcd_write_data(&lcd, 3);
		lcd_write_data(&lcd, 2);
		lcd_write_data(&lcd, 1);
	}



//	for (int i = 0; i < 8; i++)
//		lcd_write_data(&lcd, U[i]);

//
//	Lcd_cursor(&lcd, 0, 2);
//	for (int i = 0; i < 8; i++)
//		lcd_write_data(&lcd, R[i]);
//	Lcd_define_char(&lcd, 0x40 + 2 * 8, R);
//
//	Lcd_cursor(&lcd, 0, 3);
//	for (int i = 0; i < 8; i++)
//		lcd_write_data(&lcd, U[i]);
//	Lcd_define_char(&lcd, 0x40 + 3 * 8, U);
//
//	Lcd_cursor(&lcd, 0, 4);
//	for (int i = 0; i < 8; i++)
//		lcd_write_data(&lcd, P[i]);
//	Lcd_define_char(&lcd, 0x40 + 4 * 8, P);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RS_Pin|RW_Pin|E_Pin|D4_Pin
                          |D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RS_Pin RW_Pin E_Pin D4_Pin
                           D5_Pin D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = RS_Pin|RW_Pin|E_Pin|D4_Pin
                          |D5_Pin|D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
