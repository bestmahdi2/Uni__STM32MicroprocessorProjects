
newProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d10  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000b6d8  08001e1c  08001e1c  00011e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d4f4  0800d4f4  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800d4f4  0800d4f4  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d4f4  0800d4f4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d4f4  0800d4f4  0001d4f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d4f8  0800d4f8  0001d4f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800d4fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000014  0800d510  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  0800d510  0002008c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006510  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001701  00000000  00000000  0002654d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a0  00000000  00000000  00027c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00016a3b  00000000  00000000  000282f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00007883  00000000  00000000  0003ed2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00080d78  00000000  00000000  000465ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000c7326  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000005e8  00000000  00000000  000c7378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000189c  00000000  00000000  000c7960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08001e04 	.word	0x08001e04

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08001e04 	.word	0x08001e04

0800014c <ILI9341_Select>:


#include "stm32f1xx_hal.h"
#include "ili9341.h"

static void ILI9341_Select() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	2110      	movs	r1, #16
 8000154:	4802      	ldr	r0, [pc, #8]	; (8000160 <ILI9341_Select+0x14>)
 8000156:	f000 ffc5 	bl	80010e4 <HAL_GPIO_WritePin>
}
 800015a:	bf00      	nop
 800015c:	bd80      	pop	{r7, pc}
 800015e:	bf00      	nop
 8000160:	40010800 	.word	0x40010800

08000164 <ILI9341_Unselect>:

void ILI9341_Unselect() {
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8000168:	2201      	movs	r2, #1
 800016a:	2110      	movs	r1, #16
 800016c:	4802      	ldr	r0, [pc, #8]	; (8000178 <ILI9341_Unselect+0x14>)
 800016e:	f000 ffb9 	bl	80010e4 <HAL_GPIO_WritePin>
}
 8000172:	bf00      	nop
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	40010800 	.word	0x40010800

0800017c <ILI9341_Reset>:

static void ILI9341_Reset() {
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 8000180:	2200      	movs	r2, #0
 8000182:	2101      	movs	r1, #1
 8000184:	4806      	ldr	r0, [pc, #24]	; (80001a0 <ILI9341_Reset+0x24>)
 8000186:	f000 ffad 	bl	80010e4 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800018a:	2005      	movs	r0, #5
 800018c:	f000 fd1e 	bl	8000bcc <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 8000190:	2201      	movs	r2, #1
 8000192:	2101      	movs	r1, #1
 8000194:	4802      	ldr	r0, [pc, #8]	; (80001a0 <ILI9341_Reset+0x24>)
 8000196:	f000 ffa5 	bl	80010e4 <HAL_GPIO_WritePin>
}
 800019a:	bf00      	nop
 800019c:	bd80      	pop	{r7, pc}
 800019e:	bf00      	nop
 80001a0:	40010c00 	.word	0x40010c00

080001a4 <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b082      	sub	sp, #8
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	4603      	mov	r3, r0
 80001ac:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 80001ae:	2200      	movs	r2, #0
 80001b0:	2102      	movs	r1, #2
 80001b2:	4807      	ldr	r0, [pc, #28]	; (80001d0 <ILI9341_WriteCommand+0x2c>)
 80001b4:	f000 ff96 	bl	80010e4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80001b8:	1df9      	adds	r1, r7, #7
 80001ba:	f04f 33ff 	mov.w	r3, #4294967295
 80001be:	2201      	movs	r2, #1
 80001c0:	4804      	ldr	r0, [pc, #16]	; (80001d4 <ILI9341_WriteCommand+0x30>)
 80001c2:	f001 fc09 	bl	80019d8 <HAL_SPI_Transmit>

}
 80001c6:	bf00      	nop
 80001c8:	3708      	adds	r7, #8
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bd80      	pop	{r7, pc}
 80001ce:	bf00      	nop
 80001d0:	40010c00 	.word	0x40010c00
 80001d4:	20000030 	.word	0x20000030

080001d8 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 80001d8:	b580      	push	{r7, lr}
 80001da:	b084      	sub	sp, #16
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
 80001e0:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 80001e2:	2201      	movs	r2, #1
 80001e4:	2102      	movs	r1, #2
 80001e6:	4811      	ldr	r0, [pc, #68]	; (800022c <ILI9341_WriteData+0x54>)
 80001e8:	f000 ff7c 	bl	80010e4 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 80001ec:	e015      	b.n	800021a <ILI9341_WriteData+0x42>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80001f4:	bf28      	it	cs
 80001f6:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 80001fa:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 80001fc:	89fa      	ldrh	r2, [r7, #14]
 80001fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000202:	6879      	ldr	r1, [r7, #4]
 8000204:	480a      	ldr	r0, [pc, #40]	; (8000230 <ILI9341_WriteData+0x58>)
 8000206:	f001 fbe7 	bl	80019d8 <HAL_SPI_Transmit>

        buff += chunk_size;
 800020a:	89fb      	ldrh	r3, [r7, #14]
 800020c:	687a      	ldr	r2, [r7, #4]
 800020e:	4413      	add	r3, r2
 8000210:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 8000212:	89fb      	ldrh	r3, [r7, #14]
 8000214:	683a      	ldr	r2, [r7, #0]
 8000216:	1ad3      	subs	r3, r2, r3
 8000218:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d1e6      	bne.n	80001ee <ILI9341_WriteData+0x16>
    }
}
 8000220:	bf00      	nop
 8000222:	bf00      	nop
 8000224:	3710      	adds	r7, #16
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	40010c00 	.word	0x40010c00
 8000230:	20000030 	.word	0x20000030

08000234 <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8000234:	b590      	push	{r4, r7, lr}
 8000236:	b085      	sub	sp, #20
 8000238:	af00      	add	r7, sp, #0
 800023a:	4604      	mov	r4, r0
 800023c:	4608      	mov	r0, r1
 800023e:	4611      	mov	r1, r2
 8000240:	461a      	mov	r2, r3
 8000242:	4623      	mov	r3, r4
 8000244:	80fb      	strh	r3, [r7, #6]
 8000246:	4603      	mov	r3, r0
 8000248:	80bb      	strh	r3, [r7, #4]
 800024a:	460b      	mov	r3, r1
 800024c:	807b      	strh	r3, [r7, #2]
 800024e:	4613      	mov	r3, r2
 8000250:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 8000252:	202a      	movs	r0, #42	; 0x2a
 8000254:	f7ff ffa6 	bl	80001a4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8000258:	88fb      	ldrh	r3, [r7, #6]
 800025a:	0a1b      	lsrs	r3, r3, #8
 800025c:	b29b      	uxth	r3, r3
 800025e:	b2db      	uxtb	r3, r3
 8000260:	733b      	strb	r3, [r7, #12]
 8000262:	88fb      	ldrh	r3, [r7, #6]
 8000264:	b2db      	uxtb	r3, r3
 8000266:	737b      	strb	r3, [r7, #13]
 8000268:	887b      	ldrh	r3, [r7, #2]
 800026a:	0a1b      	lsrs	r3, r3, #8
 800026c:	b29b      	uxth	r3, r3
 800026e:	b2db      	uxtb	r3, r3
 8000270:	73bb      	strb	r3, [r7, #14]
 8000272:	887b      	ldrh	r3, [r7, #2]
 8000274:	b2db      	uxtb	r3, r3
 8000276:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 8000278:	f107 030c 	add.w	r3, r7, #12
 800027c:	2104      	movs	r1, #4
 800027e:	4618      	mov	r0, r3
 8000280:	f7ff ffaa 	bl	80001d8 <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 8000284:	202b      	movs	r0, #43	; 0x2b
 8000286:	f7ff ff8d 	bl	80001a4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 800028a:	88bb      	ldrh	r3, [r7, #4]
 800028c:	0a1b      	lsrs	r3, r3, #8
 800028e:	b29b      	uxth	r3, r3
 8000290:	b2db      	uxtb	r3, r3
 8000292:	723b      	strb	r3, [r7, #8]
 8000294:	88bb      	ldrh	r3, [r7, #4]
 8000296:	b2db      	uxtb	r3, r3
 8000298:	727b      	strb	r3, [r7, #9]
 800029a:	883b      	ldrh	r3, [r7, #0]
 800029c:	0a1b      	lsrs	r3, r3, #8
 800029e:	b29b      	uxth	r3, r3
 80002a0:	b2db      	uxtb	r3, r3
 80002a2:	72bb      	strb	r3, [r7, #10]
 80002a4:	883b      	ldrh	r3, [r7, #0]
 80002a6:	b2db      	uxtb	r3, r3
 80002a8:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 80002aa:	f107 0308 	add.w	r3, r7, #8
 80002ae:	2104      	movs	r1, #4
 80002b0:	4618      	mov	r0, r3
 80002b2:	f7ff ff91 	bl	80001d8 <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 80002b6:	202c      	movs	r0, #44	; 0x2c
 80002b8:	f7ff ff74 	bl	80001a4 <ILI9341_WriteCommand>
}
 80002bc:	bf00      	nop
 80002be:	3714      	adds	r7, #20
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd90      	pop	{r4, r7, pc}

080002c4 <ILI9341_Init>:

void ILI9341_Init() {
 80002c4:	b590      	push	{r4, r7, lr}
 80002c6:	b09b      	sub	sp, #108	; 0x6c
 80002c8:	af00      	add	r7, sp, #0
    ILI9341_Select();
 80002ca:	f7ff ff3f 	bl	800014c <ILI9341_Select>
    ILI9341_Reset();
 80002ce:	f7ff ff55 	bl	800017c <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 80002d2:	2001      	movs	r0, #1
 80002d4:	f7ff ff66 	bl	80001a4 <ILI9341_WriteCommand>
    HAL_Delay(1000);
 80002d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002dc:	f000 fc76 	bl	8000bcc <HAL_Delay>

    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 80002e0:	20cb      	movs	r0, #203	; 0xcb
 80002e2:	f7ff ff5f 	bl	80001a4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 80002e6:	4a87      	ldr	r2, [pc, #540]	; (8000504 <ILI9341_Init+0x240>)
 80002e8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80002ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002f0:	6018      	str	r0, [r3, #0]
 80002f2:	3304      	adds	r3, #4
 80002f4:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80002f6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80002fa:	2105      	movs	r1, #5
 80002fc:	4618      	mov	r0, r3
 80002fe:	f7ff ff6b 	bl	80001d8 <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 8000302:	20cf      	movs	r0, #207	; 0xcf
 8000304:	f7ff ff4e 	bl	80001a4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 8000308:	4a7f      	ldr	r2, [pc, #508]	; (8000508 <ILI9341_Init+0x244>)
 800030a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800030e:	6812      	ldr	r2, [r2, #0]
 8000310:	4611      	mov	r1, r2
 8000312:	8019      	strh	r1, [r3, #0]
 8000314:	3302      	adds	r3, #2
 8000316:	0c12      	lsrs	r2, r2, #16
 8000318:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800031a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800031e:	2103      	movs	r1, #3
 8000320:	4618      	mov	r0, r3
 8000322:	f7ff ff59 	bl	80001d8 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 8000326:	20e8      	movs	r0, #232	; 0xe8
 8000328:	f7ff ff3c 	bl	80001a4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 800032c:	4a77      	ldr	r2, [pc, #476]	; (800050c <ILI9341_Init+0x248>)
 800032e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000332:	6812      	ldr	r2, [r2, #0]
 8000334:	4611      	mov	r1, r2
 8000336:	8019      	strh	r1, [r3, #0]
 8000338:	3302      	adds	r3, #2
 800033a:	0c12      	lsrs	r2, r2, #16
 800033c:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800033e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000342:	2103      	movs	r1, #3
 8000344:	4618      	mov	r0, r3
 8000346:	f7ff ff47 	bl	80001d8 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 800034a:	20ea      	movs	r0, #234	; 0xea
 800034c:	f7ff ff2a 	bl	80001a4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 8000350:	2300      	movs	r3, #0
 8000352:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        ILI9341_WriteData(data, sizeof(data));
 8000356:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800035a:	2102      	movs	r1, #2
 800035c:	4618      	mov	r0, r3
 800035e:	f7ff ff3b 	bl	80001d8 <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 8000362:	20ed      	movs	r0, #237	; 0xed
 8000364:	f7ff ff1e 	bl	80001a4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 8000368:	4b69      	ldr	r3, [pc, #420]	; (8000510 <ILI9341_Init+0x24c>)
 800036a:	653b      	str	r3, [r7, #80]	; 0x50
        ILI9341_WriteData(data, sizeof(data));
 800036c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000370:	2104      	movs	r1, #4
 8000372:	4618      	mov	r0, r3
 8000374:	f7ff ff30 	bl	80001d8 <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 8000378:	20f7      	movs	r0, #247	; 0xf7
 800037a:	f7ff ff13 	bl	80001a4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 800037e:	2320      	movs	r3, #32
 8000380:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        ILI9341_WriteData(data, sizeof(data));
 8000384:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000388:	2101      	movs	r1, #1
 800038a:	4618      	mov	r0, r3
 800038c:	f7ff ff24 	bl	80001d8 <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 8000390:	20c0      	movs	r0, #192	; 0xc0
 8000392:	f7ff ff07 	bl	80001a4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 8000396:	2323      	movs	r3, #35	; 0x23
 8000398:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        ILI9341_WriteData(data, sizeof(data));
 800039c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80003a0:	2101      	movs	r1, #1
 80003a2:	4618      	mov	r0, r3
 80003a4:	f7ff ff18 	bl	80001d8 <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 80003a8:	20c1      	movs	r0, #193	; 0xc1
 80003aa:	f7ff fefb 	bl	80001a4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 80003ae:	2310      	movs	r3, #16
 80003b0:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
        ILI9341_WriteData(data, sizeof(data));
 80003b4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003b8:	2101      	movs	r1, #1
 80003ba:	4618      	mov	r0, r3
 80003bc:	f7ff ff0c 	bl	80001d8 <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 80003c0:	20c5      	movs	r0, #197	; 0xc5
 80003c2:	f7ff feef 	bl	80001a4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 80003c6:	f642 033e 	movw	r3, #10302	; 0x283e
 80003ca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        ILI9341_WriteData(data, sizeof(data));
 80003ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80003d2:	2102      	movs	r1, #2
 80003d4:	4618      	mov	r0, r3
 80003d6:	f7ff feff 	bl	80001d8 <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 80003da:	20c7      	movs	r0, #199	; 0xc7
 80003dc:	f7ff fee2 	bl	80001a4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 80003e0:	2386      	movs	r3, #134	; 0x86
 80003e2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        ILI9341_WriteData(data, sizeof(data));
 80003e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003ea:	2101      	movs	r1, #1
 80003ec:	4618      	mov	r0, r3
 80003ee:	f7ff fef3 	bl	80001d8 <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 80003f2:	2036      	movs	r0, #54	; 0x36
 80003f4:	f7ff fed6 	bl	80001a4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 80003f8:	2348      	movs	r3, #72	; 0x48
 80003fa:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        ILI9341_WriteData(data, sizeof(data));
 80003fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000402:	2101      	movs	r1, #1
 8000404:	4618      	mov	r0, r3
 8000406:	f7ff fee7 	bl	80001d8 <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 800040a:	203a      	movs	r0, #58	; 0x3a
 800040c:	f7ff feca 	bl	80001a4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 8000410:	2355      	movs	r3, #85	; 0x55
 8000412:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        ILI9341_WriteData(data, sizeof(data));
 8000416:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800041a:	2101      	movs	r1, #1
 800041c:	4618      	mov	r0, r3
 800041e:	f7ff fedb 	bl	80001d8 <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 8000422:	20b1      	movs	r0, #177	; 0xb1
 8000424:	f7ff febe 	bl	80001a4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 8000428:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800042c:	863b      	strh	r3, [r7, #48]	; 0x30
        ILI9341_WriteData(data, sizeof(data));
 800042e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000432:	2102      	movs	r1, #2
 8000434:	4618      	mov	r0, r3
 8000436:	f7ff fecf 	bl	80001d8 <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 800043a:	20b6      	movs	r0, #182	; 0xb6
 800043c:	f7ff feb2 	bl	80001a4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 8000440:	4a34      	ldr	r2, [pc, #208]	; (8000514 <ILI9341_Init+0x250>)
 8000442:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000446:	6812      	ldr	r2, [r2, #0]
 8000448:	4611      	mov	r1, r2
 800044a:	8019      	strh	r1, [r3, #0]
 800044c:	3302      	adds	r3, #2
 800044e:	0c12      	lsrs	r2, r2, #16
 8000450:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000452:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000456:	2103      	movs	r1, #3
 8000458:	4618      	mov	r0, r3
 800045a:	f7ff febd 	bl	80001d8 <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 800045e:	20f2      	movs	r0, #242	; 0xf2
 8000460:	f7ff fea0 	bl	80001a4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 8000464:	2300      	movs	r3, #0
 8000466:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        ILI9341_WriteData(data, sizeof(data));
 800046a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800046e:	2101      	movs	r1, #1
 8000470:	4618      	mov	r0, r3
 8000472:	f7ff feb1 	bl	80001d8 <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 8000476:	2026      	movs	r0, #38	; 0x26
 8000478:	f7ff fe94 	bl	80001a4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 800047c:	2301      	movs	r3, #1
 800047e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        ILI9341_WriteData(data, sizeof(data));
 8000482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000486:	2101      	movs	r1, #1
 8000488:	4618      	mov	r0, r3
 800048a:	f7ff fea5 	bl	80001d8 <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 800048e:	20e0      	movs	r0, #224	; 0xe0
 8000490:	f7ff fe88 	bl	80001a4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8000494:	4b20      	ldr	r3, [pc, #128]	; (8000518 <ILI9341_Init+0x254>)
 8000496:	f107 0414 	add.w	r4, r7, #20
 800049a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800049c:	c407      	stmia	r4!, {r0, r1, r2}
 800049e:	8023      	strh	r3, [r4, #0]
 80004a0:	3402      	adds	r4, #2
 80004a2:	0c1b      	lsrs	r3, r3, #16
 80004a4:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 80004a6:	f107 0314 	add.w	r3, r7, #20
 80004aa:	210f      	movs	r1, #15
 80004ac:	4618      	mov	r0, r3
 80004ae:	f7ff fe93 	bl	80001d8 <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 80004b2:	20e1      	movs	r0, #225	; 0xe1
 80004b4:	f7ff fe76 	bl	80001a4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 80004b8:	4b18      	ldr	r3, [pc, #96]	; (800051c <ILI9341_Init+0x258>)
 80004ba:	1d3c      	adds	r4, r7, #4
 80004bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004be:	c407      	stmia	r4!, {r0, r1, r2}
 80004c0:	8023      	strh	r3, [r4, #0]
 80004c2:	3402      	adds	r4, #2
 80004c4:	0c1b      	lsrs	r3, r3, #16
 80004c6:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 80004c8:	1d3b      	adds	r3, r7, #4
 80004ca:	210f      	movs	r1, #15
 80004cc:	4618      	mov	r0, r3
 80004ce:	f7ff fe83 	bl	80001d8 <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 80004d2:	2011      	movs	r0, #17
 80004d4:	f7ff fe66 	bl	80001a4 <ILI9341_WriteCommand>
    HAL_Delay(120);
 80004d8:	2078      	movs	r0, #120	; 0x78
 80004da:	f000 fb77 	bl	8000bcc <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 80004de:	2029      	movs	r0, #41	; 0x29
 80004e0:	f7ff fe60 	bl	80001a4 <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 80004e4:	2036      	movs	r0, #54	; 0x36
 80004e6:	f7ff fe5d 	bl	80001a4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 80004ea:	2348      	movs	r3, #72	; 0x48
 80004ec:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 80004ee:	463b      	mov	r3, r7
 80004f0:	2101      	movs	r1, #1
 80004f2:	4618      	mov	r0, r3
 80004f4:	f7ff fe70 	bl	80001d8 <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 80004f8:	f7ff fe34 	bl	8000164 <ILI9341_Unselect>
}
 80004fc:	bf00      	nop
 80004fe:	376c      	adds	r7, #108	; 0x6c
 8000500:	46bd      	mov	sp, r7
 8000502:	bd90      	pop	{r4, r7, pc}
 8000504:	08001e1c 	.word	0x08001e1c
 8000508:	08001e24 	.word	0x08001e24
 800050c:	08001e28 	.word	0x08001e28
 8000510:	81120364 	.word	0x81120364
 8000514:	08001e2c 	.word	0x08001e2c
 8000518:	08001e30 	.word	0x08001e30
 800051c:	08001e40 	.word	0x08001e40

08000520 <ILI9341_WriteChar>:
    ILI9341_WriteData(data, sizeof(data));

    ILI9341_Unselect();
}

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000520:	b082      	sub	sp, #8
 8000522:	b590      	push	{r4, r7, lr}
 8000524:	b089      	sub	sp, #36	; 0x24
 8000526:	af00      	add	r7, sp, #0
 8000528:	637b      	str	r3, [r7, #52]	; 0x34
 800052a:	4603      	mov	r3, r0
 800052c:	80fb      	strh	r3, [r7, #6]
 800052e:	460b      	mov	r3, r1
 8000530:	80bb      	strh	r3, [r7, #4]
 8000532:	4613      	mov	r3, r2
 8000534:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000536:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800053a:	b29a      	uxth	r2, r3
 800053c:	88fb      	ldrh	r3, [r7, #6]
 800053e:	4413      	add	r3, r2
 8000540:	b29b      	uxth	r3, r3
 8000542:	3b01      	subs	r3, #1
 8000544:	b29c      	uxth	r4, r3
 8000546:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800054a:	b29a      	uxth	r2, r3
 800054c:	88bb      	ldrh	r3, [r7, #4]
 800054e:	4413      	add	r3, r2
 8000550:	b29b      	uxth	r3, r3
 8000552:	3b01      	subs	r3, #1
 8000554:	b29b      	uxth	r3, r3
 8000556:	88b9      	ldrh	r1, [r7, #4]
 8000558:	88f8      	ldrh	r0, [r7, #6]
 800055a:	4622      	mov	r2, r4
 800055c:	f7ff fe6a 	bl	8000234 <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000560:	2300      	movs	r3, #0
 8000562:	61fb      	str	r3, [r7, #28]
 8000564:	e043      	b.n	80005ee <ILI9341_WriteChar+0xce>
        b = font.data[(ch - 32) * font.height + i];
 8000566:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000568:	78fb      	ldrb	r3, [r7, #3]
 800056a:	3b20      	subs	r3, #32
 800056c:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000570:	fb01 f303 	mul.w	r3, r1, r3
 8000574:	4619      	mov	r1, r3
 8000576:	69fb      	ldr	r3, [r7, #28]
 8000578:	440b      	add	r3, r1
 800057a:	005b      	lsls	r3, r3, #1
 800057c:	4413      	add	r3, r2
 800057e:	881b      	ldrh	r3, [r3, #0]
 8000580:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000582:	2300      	movs	r3, #0
 8000584:	61bb      	str	r3, [r7, #24]
 8000586:	e029      	b.n	80005dc <ILI9341_WriteChar+0xbc>
            if((b << j) & 0x8000)  {
 8000588:	697a      	ldr	r2, [r7, #20]
 800058a:	69bb      	ldr	r3, [r7, #24]
 800058c:	fa02 f303 	lsl.w	r3, r2, r3
 8000590:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000594:	2b00      	cmp	r3, #0
 8000596:	d00e      	beq.n	80005b6 <ILI9341_WriteChar+0x96>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000598:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800059a:	0a1b      	lsrs	r3, r3, #8
 800059c:	b29b      	uxth	r3, r3
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	743b      	strb	r3, [r7, #16]
 80005a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 80005a8:	f107 0310 	add.w	r3, r7, #16
 80005ac:	2102      	movs	r1, #2
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff fe12 	bl	80001d8 <ILI9341_WriteData>
 80005b4:	e00f      	b.n	80005d6 <ILI9341_WriteChar+0xb6>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80005b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80005ba:	0a1b      	lsrs	r3, r3, #8
 80005bc:	b29b      	uxth	r3, r3
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	733b      	strb	r3, [r7, #12]
 80005c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	2102      	movs	r1, #2
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff fe01 	bl	80001d8 <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 80005d6:	69bb      	ldr	r3, [r7, #24]
 80005d8:	3301      	adds	r3, #1
 80005da:	61bb      	str	r3, [r7, #24]
 80005dc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80005e0:	461a      	mov	r2, r3
 80005e2:	69bb      	ldr	r3, [r7, #24]
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d3cf      	bcc.n	8000588 <ILI9341_WriteChar+0x68>
    for(i = 0; i < font.height; i++) {
 80005e8:	69fb      	ldr	r3, [r7, #28]
 80005ea:	3301      	adds	r3, #1
 80005ec:	61fb      	str	r3, [r7, #28]
 80005ee:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80005f2:	461a      	mov	r2, r3
 80005f4:	69fb      	ldr	r3, [r7, #28]
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d3b5      	bcc.n	8000566 <ILI9341_WriteChar+0x46>
            }
        }
    }
}
 80005fa:	bf00      	nop
 80005fc:	bf00      	nop
 80005fe:	3724      	adds	r7, #36	; 0x24
 8000600:	46bd      	mov	sp, r7
 8000602:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000606:	b002      	add	sp, #8
 8000608:	4770      	bx	lr

0800060a <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800060a:	b082      	sub	sp, #8
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af04      	add	r7, sp, #16
 8000612:	603a      	str	r2, [r7, #0]
 8000614:	617b      	str	r3, [r7, #20]
 8000616:	4603      	mov	r3, r0
 8000618:	80fb      	strh	r3, [r7, #6]
 800061a:	460b      	mov	r3, r1
 800061c:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 800061e:	f7ff fd95 	bl	800014c <ILI9341_Select>

    while(*str) {
 8000622:	e02e      	b.n	8000682 <ILI9341_WriteString+0x78>
        if(x + font.width >= ILI9341_WIDTH) {
 8000624:	88fb      	ldrh	r3, [r7, #6]
 8000626:	7d3a      	ldrb	r2, [r7, #20]
 8000628:	4413      	add	r3, r2
 800062a:	2bef      	cmp	r3, #239	; 0xef
 800062c:	dd14      	ble.n	8000658 <ILI9341_WriteString+0x4e>
            x = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000632:	7d7b      	ldrb	r3, [r7, #21]
 8000634:	b29a      	uxth	r2, r3
 8000636:	88bb      	ldrh	r3, [r7, #4]
 8000638:	4413      	add	r3, r2
 800063a:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 800063c:	88bb      	ldrh	r3, [r7, #4]
 800063e:	7d7a      	ldrb	r2, [r7, #21]
 8000640:	4413      	add	r3, r2
 8000642:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000646:	da21      	bge.n	800068c <ILI9341_WriteString+0x82>
                break;
            }

            if(*str == ' ') {
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b20      	cmp	r3, #32
 800064e:	d103      	bne.n	8000658 <ILI9341_WriteString+0x4e>
                // skip spaces in the beginning of the new line
                str++;
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	3301      	adds	r3, #1
 8000654:	603b      	str	r3, [r7, #0]
                continue;
 8000656:	e014      	b.n	8000682 <ILI9341_WriteString+0x78>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	781a      	ldrb	r2, [r3, #0]
 800065c:	88b9      	ldrh	r1, [r7, #4]
 800065e:	88f8      	ldrh	r0, [r7, #6]
 8000660:	8c3b      	ldrh	r3, [r7, #32]
 8000662:	9302      	str	r3, [sp, #8]
 8000664:	8bbb      	ldrh	r3, [r7, #28]
 8000666:	9301      	str	r3, [sp, #4]
 8000668:	69bb      	ldr	r3, [r7, #24]
 800066a:	9300      	str	r3, [sp, #0]
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	f7ff ff57 	bl	8000520 <ILI9341_WriteChar>
        x += font.width;
 8000672:	7d3b      	ldrb	r3, [r7, #20]
 8000674:	b29a      	uxth	r2, r3
 8000676:	88fb      	ldrh	r3, [r7, #6]
 8000678:	4413      	add	r3, r2
 800067a:	80fb      	strh	r3, [r7, #6]
        str++;
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	3301      	adds	r3, #1
 8000680:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d1cc      	bne.n	8000624 <ILI9341_WriteString+0x1a>
 800068a:	e000      	b.n	800068e <ILI9341_WriteString+0x84>
                break;
 800068c:	bf00      	nop
    }

    ILI9341_Unselect();
 800068e:	f7ff fd69 	bl	8000164 <ILI9341_Unselect>
}
 8000692:	bf00      	nop
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800069c:	b002      	add	sp, #8
 800069e:	4770      	bx	lr

080006a0 <ILI9341_DrawImage>:

void ILI9341_FillScreen(uint16_t color) {
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
}

void ILI9341_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 80006a0:	b590      	push	{r4, r7, lr}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4604      	mov	r4, r0
 80006a8:	4608      	mov	r0, r1
 80006aa:	4611      	mov	r1, r2
 80006ac:	461a      	mov	r2, r3
 80006ae:	4623      	mov	r3, r4
 80006b0:	80fb      	strh	r3, [r7, #6]
 80006b2:	4603      	mov	r3, r0
 80006b4:	80bb      	strh	r3, [r7, #4]
 80006b6:	460b      	mov	r3, r1
 80006b8:	807b      	strh	r3, [r7, #2]
 80006ba:	4613      	mov	r3, r2
 80006bc:	803b      	strh	r3, [r7, #0]
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 80006be:	88fb      	ldrh	r3, [r7, #6]
 80006c0:	2bef      	cmp	r3, #239	; 0xef
 80006c2:	d82d      	bhi.n	8000720 <ILI9341_DrawImage+0x80>
 80006c4:	88bb      	ldrh	r3, [r7, #4]
 80006c6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80006ca:	d229      	bcs.n	8000720 <ILI9341_DrawImage+0x80>
    if((x + w - 1) >= ILI9341_WIDTH) return;
 80006cc:	88fa      	ldrh	r2, [r7, #6]
 80006ce:	887b      	ldrh	r3, [r7, #2]
 80006d0:	4413      	add	r3, r2
 80006d2:	2bf0      	cmp	r3, #240	; 0xf0
 80006d4:	dc26      	bgt.n	8000724 <ILI9341_DrawImage+0x84>
    if((y + h - 1) >= ILI9341_HEIGHT) return;
 80006d6:	88ba      	ldrh	r2, [r7, #4]
 80006d8:	883b      	ldrh	r3, [r7, #0]
 80006da:	4413      	add	r3, r2
 80006dc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80006e0:	dc22      	bgt.n	8000728 <ILI9341_DrawImage+0x88>

    ILI9341_Select();
 80006e2:	f7ff fd33 	bl	800014c <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 80006e6:	88fa      	ldrh	r2, [r7, #6]
 80006e8:	887b      	ldrh	r3, [r7, #2]
 80006ea:	4413      	add	r3, r2
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	3b01      	subs	r3, #1
 80006f0:	b29c      	uxth	r4, r3
 80006f2:	88ba      	ldrh	r2, [r7, #4]
 80006f4:	883b      	ldrh	r3, [r7, #0]
 80006f6:	4413      	add	r3, r2
 80006f8:	b29b      	uxth	r3, r3
 80006fa:	3b01      	subs	r3, #1
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	88b9      	ldrh	r1, [r7, #4]
 8000700:	88f8      	ldrh	r0, [r7, #6]
 8000702:	4622      	mov	r2, r4
 8000704:	f7ff fd96 	bl	8000234 <ILI9341_SetAddressWindow>
    ILI9341_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8000708:	887b      	ldrh	r3, [r7, #2]
 800070a:	883a      	ldrh	r2, [r7, #0]
 800070c:	fb02 f303 	mul.w	r3, r2, r3
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	4619      	mov	r1, r3
 8000714:	69b8      	ldr	r0, [r7, #24]
 8000716:	f7ff fd5f 	bl	80001d8 <ILI9341_WriteData>
    ILI9341_Unselect();
 800071a:	f7ff fd23 	bl	8000164 <ILI9341_Unselect>
 800071e:	e004      	b.n	800072a <ILI9341_DrawImage+0x8a>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000720:	bf00      	nop
 8000722:	e002      	b.n	800072a <ILI9341_DrawImage+0x8a>
    if((x + w - 1) >= ILI9341_WIDTH) return;
 8000724:	bf00      	nop
 8000726:	e000      	b.n	800072a <ILI9341_DrawImage+0x8a>
    if((y + h - 1) >= ILI9341_HEIGHT) return;
 8000728:	bf00      	nop
}
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	bd90      	pop	{r4, r7, pc}

08000730 <ILI9341_TouchUnselect>:

static void ILI9341_TouchSelect() {
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_RESET);
}

void ILI9341_TouchUnselect() {
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_SET);
 8000734:	2201      	movs	r2, #1
 8000736:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800073a:	4802      	ldr	r0, [pc, #8]	; (8000744 <ILI9341_TouchUnselect+0x14>)
 800073c:	f000 fcd2 	bl	80010e4 <HAL_GPIO_WritePin>
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40010800 	.word	0x40010800

08000748 <init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void init() {
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
    ILI9341_Unselect();
 800074c:	f7ff fd0a 	bl	8000164 <ILI9341_Unselect>
    ILI9341_TouchUnselect();
 8000750:	f7ff ffee 	bl	8000730 <ILI9341_TouchUnselect>
    ILI9341_Init();
 8000754:	f7ff fdb6 	bl	80002c4 <ILI9341_Init>
}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}

0800075c <loop>:

void loop() {
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af04      	add	r7, sp, #16
	ILI9341_DrawImage((ILI9341_WIDTH - 240)/2,(ILI9341_HEIGHT-240)/2,240,240,
 8000762:	4b1e      	ldr	r3, [pc, #120]	; (80007dc <loop+0x80>)
 8000764:	9300      	str	r3, [sp, #0]
 8000766:	23f0      	movs	r3, #240	; 0xf0
 8000768:	22f0      	movs	r2, #240	; 0xf0
 800076a:	2128      	movs	r1, #40	; 0x28
 800076c:	2000      	movs	r0, #0
 800076e:	f7ff ff97 	bl	80006a0 <ILI9341_DrawImage>
	(const uint16_t*)test_img_240x240);
	HAL_Delay(3000);
 8000772:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000776:	f000 fa29 	bl	8000bcc <HAL_Delay>


    // Check font
	ILI9341_WriteString(0,    0, "This is", Font_16x26,   ILI9341_RED, ILI9341_WHITE);
 800077a:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <loop+0x84>)
 800077c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000780:	9202      	str	r2, [sp, #8]
 8000782:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000786:	9201      	str	r2, [sp, #4]
 8000788:	685a      	ldr	r2, [r3, #4]
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a15      	ldr	r2, [pc, #84]	; (80007e4 <loop+0x88>)
 8000790:	2100      	movs	r1, #0
 8000792:	2000      	movs	r0, #0
 8000794:	f7ff ff39 	bl	800060a <ILI9341_WriteString>
	ILI9341_WriteString(0, 3*20,     "ALI", Font_16x26,   ILI9341_RED, ILI9341_WHITE);
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <loop+0x84>)
 800079a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800079e:	9202      	str	r2, [sp, #8]
 80007a0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80007a4:	9201      	str	r2, [sp, #4]
 80007a6:	685a      	ldr	r2, [r3, #4]
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a0e      	ldr	r2, [pc, #56]	; (80007e8 <loop+0x8c>)
 80007ae:	213c      	movs	r1, #60	; 0x3c
 80007b0:	2000      	movs	r0, #0
 80007b2:	f7ff ff2a 	bl	800060a <ILI9341_WriteString>
	ILI9341_WriteString(0, 3*40,  "Badiee", Font_16x26, ILI9341_GREEN, ILI9341_WHITE);
 80007b6:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <loop+0x84>)
 80007b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007bc:	9202      	str	r2, [sp, #8]
 80007be:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80007c2:	9201      	str	r2, [sp, #4]
 80007c4:	685a      	ldr	r2, [r3, #4]
 80007c6:	9200      	str	r2, [sp, #0]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a08      	ldr	r2, [pc, #32]	; (80007ec <loop+0x90>)
 80007cc:	2178      	movs	r1, #120	; 0x78
 80007ce:	2000      	movs	r0, #0
 80007d0:	f7ff ff1b 	bl	800060a <ILI9341_WriteString>
//
//    ILI9341_FillScreen(ILI9341_RED);
//    ILI9341_WriteString(0, 0, "RED", Font_11x18, ILI9341_BLACK, ILI9341_RED);
//    HAL_Delay(500);

}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	080031b0 	.word	0x080031b0
 80007e0:	20000000 	.word	0x20000000
 80007e4:	08001e50 	.word	0x08001e50
 80007e8:	08001e58 	.word	0x08001e58
 80007ec:	08001e5c 	.word	0x08001e5c

080007f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f4:	f000 f988 	bl	8000b08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f8:	f000 f809 	bl	800080e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007fc:	f000 f878 	bl	80008f0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000800:	f000 f840 	bl	8000884 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  init();
 8000804:	f7ff ffa0 	bl	8000748 <init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	loop();
 8000808:	f7ff ffa8 	bl	800075c <loop>
 800080c:	e7fc      	b.n	8000808 <main+0x18>

0800080e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	b090      	sub	sp, #64	; 0x40
 8000812:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000814:	f107 0318 	add.w	r3, r7, #24
 8000818:	2228      	movs	r2, #40	; 0x28
 800081a:	2100      	movs	r1, #0
 800081c:	4618      	mov	r0, r3
 800081e:	f001 fae9 	bl	8001df4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000830:	2302      	movs	r3, #2
 8000832:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000834:	2301      	movs	r3, #1
 8000836:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000838:	2310      	movs	r3, #16
 800083a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800083c:	2300      	movs	r3, #0
 800083e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000840:	f107 0318 	add.w	r3, r7, #24
 8000844:	4618      	mov	r0, r3
 8000846:	f000 fc65 	bl	8001114 <HAL_RCC_OscConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000850:	f000 f8a0 	bl	8000994 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000854:	230f      	movs	r3, #15
 8000856:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000858:	2300      	movs	r3, #0
 800085a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000860:	2300      	movs	r3, #0
 8000862:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2100      	movs	r1, #0
 800086c:	4618      	mov	r0, r3
 800086e:	f000 fed3 	bl	8001618 <HAL_RCC_ClockConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000878:	f000 f88c 	bl	8000994 <Error_Handler>
  }
}
 800087c:	bf00      	nop
 800087e:	3740      	adds	r7, #64	; 0x40
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000888:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <MX_SPI1_Init+0x64>)
 800088a:	4a18      	ldr	r2, [pc, #96]	; (80008ec <MX_SPI1_Init+0x68>)
 800088c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800088e:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <MX_SPI1_Init+0x64>)
 8000890:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000894:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_SPI1_Init+0x64>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <MX_SPI1_Init+0x64>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80008b6:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008b8:	2228      	movs	r2, #40	; 0x28
 80008ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008bc:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008be:	2200      	movs	r2, #0
 80008c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c8:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008d0:	220a      	movs	r2, #10
 80008d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008d4:	4804      	ldr	r0, [pc, #16]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008d6:	f000 fffb 	bl	80018d0 <HAL_SPI_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008e0:	f000 f858 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000030 	.word	0x20000030
 80008ec:	40013000 	.word	0x40013000

080008f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f6:	f107 0308 	add.w	r3, r7, #8
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000904:	4b20      	ldr	r3, [pc, #128]	; (8000988 <MX_GPIO_Init+0x98>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	4a1f      	ldr	r2, [pc, #124]	; (8000988 <MX_GPIO_Init+0x98>)
 800090a:	f043 0304 	orr.w	r3, r3, #4
 800090e:	6193      	str	r3, [r2, #24]
 8000910:	4b1d      	ldr	r3, [pc, #116]	; (8000988 <MX_GPIO_Init+0x98>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	f003 0304 	and.w	r3, r3, #4
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091c:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <MX_GPIO_Init+0x98>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	4a19      	ldr	r2, [pc, #100]	; (8000988 <MX_GPIO_Init+0x98>)
 8000922:	f043 0308 	orr.w	r3, r3, #8
 8000926:	6193      	str	r3, [r2, #24]
 8000928:	4b17      	ldr	r3, [pc, #92]	; (8000988 <MX_GPIO_Init+0x98>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	f003 0308 	and.w	r3, r3, #8
 8000930:	603b      	str	r3, [r7, #0]
 8000932:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000934:	2200      	movs	r2, #0
 8000936:	2110      	movs	r1, #16
 8000938:	4814      	ldr	r0, [pc, #80]	; (800098c <MX_GPIO_Init+0x9c>)
 800093a:	f000 fbd3 	bl	80010e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	2103      	movs	r1, #3
 8000942:	4813      	ldr	r0, [pc, #76]	; (8000990 <MX_GPIO_Init+0xa0>)
 8000944:	f000 fbce 	bl	80010e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000948:	2310      	movs	r3, #16
 800094a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094c:	2301      	movs	r3, #1
 800094e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2302      	movs	r3, #2
 8000956:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000958:	f107 0308 	add.w	r3, r7, #8
 800095c:	4619      	mov	r1, r3
 800095e:	480b      	ldr	r0, [pc, #44]	; (800098c <MX_GPIO_Init+0x9c>)
 8000960:	f000 fa3c 	bl	8000ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000964:	2303      	movs	r3, #3
 8000966:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000968:	2301      	movs	r3, #1
 800096a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2302      	movs	r3, #2
 8000972:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000974:	f107 0308 	add.w	r3, r7, #8
 8000978:	4619      	mov	r1, r3
 800097a:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_GPIO_Init+0xa0>)
 800097c:	f000 fa2e 	bl	8000ddc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000980:	bf00      	nop
 8000982:	3718      	adds	r7, #24
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40021000 	.word	0x40021000
 800098c:	40010800 	.word	0x40010800
 8000990:	40010c00 	.word	0x40010c00

08000994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000998:	b672      	cpsid	i
}
 800099a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800099c:	e7fe      	b.n	800099c <Error_Handler+0x8>
	...

080009a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <HAL_MspInit+0x40>)
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	4a0d      	ldr	r2, [pc, #52]	; (80009e0 <HAL_MspInit+0x40>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	6193      	str	r3, [r2, #24]
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <HAL_MspInit+0x40>)
 80009b4:	699b      	ldr	r3, [r3, #24]
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <HAL_MspInit+0x40>)
 80009c0:	69db      	ldr	r3, [r3, #28]
 80009c2:	4a07      	ldr	r2, [pc, #28]	; (80009e0 <HAL_MspInit+0x40>)
 80009c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c8:	61d3      	str	r3, [r2, #28]
 80009ca:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <HAL_MspInit+0x40>)
 80009cc:	69db      	ldr	r3, [r3, #28]
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr
 80009e0:	40021000 	.word	0x40021000

080009e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b088      	sub	sp, #32
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 0310 	add.w	r3, r7, #16
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a15      	ldr	r2, [pc, #84]	; (8000a54 <HAL_SPI_MspInit+0x70>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d123      	bne.n	8000a4c <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a04:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <HAL_SPI_MspInit+0x74>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	4a13      	ldr	r2, [pc, #76]	; (8000a58 <HAL_SPI_MspInit+0x74>)
 8000a0a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a0e:	6193      	str	r3, [r2, #24]
 8000a10:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <HAL_SPI_MspInit+0x74>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1c:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <HAL_SPI_MspInit+0x74>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	4a0d      	ldr	r2, [pc, #52]	; (8000a58 <HAL_SPI_MspInit+0x74>)
 8000a22:	f043 0304 	orr.w	r3, r3, #4
 8000a26:	6193      	str	r3, [r2, #24]
 8000a28:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <HAL_SPI_MspInit+0x74>)
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	f003 0304 	and.w	r3, r3, #4
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000a34:	23a0      	movs	r3, #160	; 0xa0
 8000a36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a40:	f107 0310 	add.w	r3, r7, #16
 8000a44:	4619      	mov	r1, r3
 8000a46:	4805      	ldr	r0, [pc, #20]	; (8000a5c <HAL_SPI_MspInit+0x78>)
 8000a48:	f000 f9c8 	bl	8000ddc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a4c:	bf00      	nop
 8000a4e:	3720      	adds	r7, #32
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40013000 	.word	0x40013000
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	40010800 	.word	0x40010800

08000a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <NMI_Handler+0x4>

08000a66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a6a:	e7fe      	b.n	8000a6a <HardFault_Handler+0x4>

08000a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <MemManage_Handler+0x4>

08000a72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <BusFault_Handler+0x4>

08000a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <UsageFault_Handler+0x4>

08000a7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bc80      	pop	{r7}
 8000a88:	4770      	bx	lr

08000a8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr

08000a96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr

08000aa2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa6:	f000 f875 	bl	8000b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}

08000aae <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr
	...

08000abc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000abc:	f7ff fff7 	bl	8000aae <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac0:	480b      	ldr	r0, [pc, #44]	; (8000af0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ac2:	490c      	ldr	r1, [pc, #48]	; (8000af4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ac4:	4a0c      	ldr	r2, [pc, #48]	; (8000af8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac8:	e002      	b.n	8000ad0 <LoopCopyDataInit>

08000aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ace:	3304      	adds	r3, #4

08000ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad4:	d3f9      	bcc.n	8000aca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad6:	4a09      	ldr	r2, [pc, #36]	; (8000afc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ad8:	4c09      	ldr	r4, [pc, #36]	; (8000b00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000adc:	e001      	b.n	8000ae2 <LoopFillZerobss>

08000ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae0:	3204      	adds	r2, #4

08000ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae4:	d3fb      	bcc.n	8000ade <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ae6:	f001 f961 	bl	8001dac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aea:	f7ff fe81 	bl	80007f0 <main>
  bx lr
 8000aee:	4770      	bx	lr
  ldr r0, =_sdata
 8000af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000af8:	0800d4fc 	.word	0x0800d4fc
  ldr r2, =_sbss
 8000afc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000b00:	2000008c 	.word	0x2000008c

08000b04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b04:	e7fe      	b.n	8000b04 <ADC1_2_IRQHandler>
	...

08000b08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b0c:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <HAL_Init+0x28>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a07      	ldr	r2, [pc, #28]	; (8000b30 <HAL_Init+0x28>)
 8000b12:	f043 0310 	orr.w	r3, r3, #16
 8000b16:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b18:	2003      	movs	r0, #3
 8000b1a:	f000 f92b 	bl	8000d74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b1e:	200f      	movs	r0, #15
 8000b20:	f000 f808 	bl	8000b34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b24:	f7ff ff3c 	bl	80009a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40022000 	.word	0x40022000

08000b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <HAL_InitTick+0x54>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <HAL_InitTick+0x58>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	4619      	mov	r1, r3
 8000b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 f935 	bl	8000dc2 <HAL_SYSTICK_Config>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e00e      	b.n	8000b80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2b0f      	cmp	r3, #15
 8000b66:	d80a      	bhi.n	8000b7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	6879      	ldr	r1, [r7, #4]
 8000b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b70:	f000 f90b 	bl	8000d8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b74:	4a06      	ldr	r2, [pc, #24]	; (8000b90 <HAL_InitTick+0x5c>)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	e000      	b.n	8000b80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000008 	.word	0x20000008
 8000b8c:	20000010 	.word	0x20000010
 8000b90:	2000000c 	.word	0x2000000c

08000b94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b98:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <HAL_IncTick+0x1c>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <HAL_IncTick+0x20>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	4a03      	ldr	r2, [pc, #12]	; (8000bb4 <HAL_IncTick+0x20>)
 8000ba6:	6013      	str	r3, [r2, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr
 8000bb0:	20000010 	.word	0x20000010
 8000bb4:	20000088 	.word	0x20000088

08000bb8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return uwTick;
 8000bbc:	4b02      	ldr	r3, [pc, #8]	; (8000bc8 <HAL_GetTick+0x10>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr
 8000bc8:	20000088 	.word	0x20000088

08000bcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd4:	f7ff fff0 	bl	8000bb8 <HAL_GetTick>
 8000bd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000be4:	d005      	beq.n	8000bf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000be6:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <HAL_Delay+0x44>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	461a      	mov	r2, r3
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	4413      	add	r3, r2
 8000bf0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bf2:	bf00      	nop
 8000bf4:	f7ff ffe0 	bl	8000bb8 <HAL_GetTick>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d8f7      	bhi.n	8000bf4 <HAL_Delay+0x28>
  {
  }
}
 8000c04:	bf00      	nop
 8000c06:	bf00      	nop
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000010 	.word	0x20000010

08000c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f003 0307 	and.w	r3, r3, #7
 8000c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c24:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <__NVIC_SetPriorityGrouping+0x44>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2a:	68ba      	ldr	r2, [r7, #8]
 8000c2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c30:	4013      	ands	r3, r2
 8000c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c46:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <__NVIC_SetPriorityGrouping+0x44>)
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	60d3      	str	r3, [r2, #12]
}
 8000c4c:	bf00      	nop
 8000c4e:	3714      	adds	r7, #20
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bc80      	pop	{r7}
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c60:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <__NVIC_GetPriorityGrouping+0x18>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	0a1b      	lsrs	r3, r3, #8
 8000c66:	f003 0307 	and.w	r3, r3, #7
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	6039      	str	r1, [r7, #0]
 8000c82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	db0a      	blt.n	8000ca2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	490c      	ldr	r1, [pc, #48]	; (8000cc4 <__NVIC_SetPriority+0x4c>)
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	0112      	lsls	r2, r2, #4
 8000c98:	b2d2      	uxtb	r2, r2
 8000c9a:	440b      	add	r3, r1
 8000c9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca0:	e00a      	b.n	8000cb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	4908      	ldr	r1, [pc, #32]	; (8000cc8 <__NVIC_SetPriority+0x50>)
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	f003 030f 	and.w	r3, r3, #15
 8000cae:	3b04      	subs	r3, #4
 8000cb0:	0112      	lsls	r2, r2, #4
 8000cb2:	b2d2      	uxtb	r2, r2
 8000cb4:	440b      	add	r3, r1
 8000cb6:	761a      	strb	r2, [r3, #24]
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bc80      	pop	{r7}
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000e100 	.word	0xe000e100
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b089      	sub	sp, #36	; 0x24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	f1c3 0307 	rsb	r3, r3, #7
 8000ce6:	2b04      	cmp	r3, #4
 8000ce8:	bf28      	it	cs
 8000cea:	2304      	movcs	r3, #4
 8000cec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	3304      	adds	r3, #4
 8000cf2:	2b06      	cmp	r3, #6
 8000cf4:	d902      	bls.n	8000cfc <NVIC_EncodePriority+0x30>
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	3b03      	subs	r3, #3
 8000cfa:	e000      	b.n	8000cfe <NVIC_EncodePriority+0x32>
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d00:	f04f 32ff 	mov.w	r2, #4294967295
 8000d04:	69bb      	ldr	r3, [r7, #24]
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43da      	mvns	r2, r3
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	401a      	ands	r2, r3
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d14:	f04f 31ff 	mov.w	r1, #4294967295
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1e:	43d9      	mvns	r1, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d24:	4313      	orrs	r3, r2
         );
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3724      	adds	r7, #36	; 0x24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr

08000d30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d40:	d301      	bcc.n	8000d46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d42:	2301      	movs	r3, #1
 8000d44:	e00f      	b.n	8000d66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d46:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <SysTick_Config+0x40>)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d4e:	210f      	movs	r1, #15
 8000d50:	f04f 30ff 	mov.w	r0, #4294967295
 8000d54:	f7ff ff90 	bl	8000c78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <SysTick_Config+0x40>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d5e:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <SysTick_Config+0x40>)
 8000d60:	2207      	movs	r2, #7
 8000d62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	e000e010 	.word	0xe000e010

08000d74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f7ff ff49 	bl	8000c14 <__NVIC_SetPriorityGrouping>
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b086      	sub	sp, #24
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	4603      	mov	r3, r0
 8000d92:	60b9      	str	r1, [r7, #8]
 8000d94:	607a      	str	r2, [r7, #4]
 8000d96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d9c:	f7ff ff5e 	bl	8000c5c <__NVIC_GetPriorityGrouping>
 8000da0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	68b9      	ldr	r1, [r7, #8]
 8000da6:	6978      	ldr	r0, [r7, #20]
 8000da8:	f7ff ff90 	bl	8000ccc <NVIC_EncodePriority>
 8000dac:	4602      	mov	r2, r0
 8000dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000db2:	4611      	mov	r1, r2
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ff5f 	bl	8000c78 <__NVIC_SetPriority>
}
 8000dba:	bf00      	nop
 8000dbc:	3718      	adds	r7, #24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f7ff ffb0 	bl	8000d30 <SysTick_Config>
 8000dd0:	4603      	mov	r3, r0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b08b      	sub	sp, #44	; 0x2c
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000de6:	2300      	movs	r3, #0
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000dea:	2300      	movs	r3, #0
 8000dec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dee:	e169      	b.n	80010c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000df0:	2201      	movs	r2, #1
 8000df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	69fa      	ldr	r2, [r7, #28]
 8000e00:	4013      	ands	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	f040 8158 	bne.w	80010be <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	4a9a      	ldr	r2, [pc, #616]	; (800107c <HAL_GPIO_Init+0x2a0>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d05e      	beq.n	8000ed6 <HAL_GPIO_Init+0xfa>
 8000e18:	4a98      	ldr	r2, [pc, #608]	; (800107c <HAL_GPIO_Init+0x2a0>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d875      	bhi.n	8000f0a <HAL_GPIO_Init+0x12e>
 8000e1e:	4a98      	ldr	r2, [pc, #608]	; (8001080 <HAL_GPIO_Init+0x2a4>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d058      	beq.n	8000ed6 <HAL_GPIO_Init+0xfa>
 8000e24:	4a96      	ldr	r2, [pc, #600]	; (8001080 <HAL_GPIO_Init+0x2a4>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d86f      	bhi.n	8000f0a <HAL_GPIO_Init+0x12e>
 8000e2a:	4a96      	ldr	r2, [pc, #600]	; (8001084 <HAL_GPIO_Init+0x2a8>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d052      	beq.n	8000ed6 <HAL_GPIO_Init+0xfa>
 8000e30:	4a94      	ldr	r2, [pc, #592]	; (8001084 <HAL_GPIO_Init+0x2a8>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d869      	bhi.n	8000f0a <HAL_GPIO_Init+0x12e>
 8000e36:	4a94      	ldr	r2, [pc, #592]	; (8001088 <HAL_GPIO_Init+0x2ac>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d04c      	beq.n	8000ed6 <HAL_GPIO_Init+0xfa>
 8000e3c:	4a92      	ldr	r2, [pc, #584]	; (8001088 <HAL_GPIO_Init+0x2ac>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d863      	bhi.n	8000f0a <HAL_GPIO_Init+0x12e>
 8000e42:	4a92      	ldr	r2, [pc, #584]	; (800108c <HAL_GPIO_Init+0x2b0>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d046      	beq.n	8000ed6 <HAL_GPIO_Init+0xfa>
 8000e48:	4a90      	ldr	r2, [pc, #576]	; (800108c <HAL_GPIO_Init+0x2b0>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d85d      	bhi.n	8000f0a <HAL_GPIO_Init+0x12e>
 8000e4e:	2b12      	cmp	r3, #18
 8000e50:	d82a      	bhi.n	8000ea8 <HAL_GPIO_Init+0xcc>
 8000e52:	2b12      	cmp	r3, #18
 8000e54:	d859      	bhi.n	8000f0a <HAL_GPIO_Init+0x12e>
 8000e56:	a201      	add	r2, pc, #4	; (adr r2, 8000e5c <HAL_GPIO_Init+0x80>)
 8000e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e5c:	08000ed7 	.word	0x08000ed7
 8000e60:	08000eb1 	.word	0x08000eb1
 8000e64:	08000ec3 	.word	0x08000ec3
 8000e68:	08000f05 	.word	0x08000f05
 8000e6c:	08000f0b 	.word	0x08000f0b
 8000e70:	08000f0b 	.word	0x08000f0b
 8000e74:	08000f0b 	.word	0x08000f0b
 8000e78:	08000f0b 	.word	0x08000f0b
 8000e7c:	08000f0b 	.word	0x08000f0b
 8000e80:	08000f0b 	.word	0x08000f0b
 8000e84:	08000f0b 	.word	0x08000f0b
 8000e88:	08000f0b 	.word	0x08000f0b
 8000e8c:	08000f0b 	.word	0x08000f0b
 8000e90:	08000f0b 	.word	0x08000f0b
 8000e94:	08000f0b 	.word	0x08000f0b
 8000e98:	08000f0b 	.word	0x08000f0b
 8000e9c:	08000f0b 	.word	0x08000f0b
 8000ea0:	08000eb9 	.word	0x08000eb9
 8000ea4:	08000ecd 	.word	0x08000ecd
 8000ea8:	4a79      	ldr	r2, [pc, #484]	; (8001090 <HAL_GPIO_Init+0x2b4>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d013      	beq.n	8000ed6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000eae:	e02c      	b.n	8000f0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	623b      	str	r3, [r7, #32]
          break;
 8000eb6:	e029      	b.n	8000f0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	623b      	str	r3, [r7, #32]
          break;
 8000ec0:	e024      	b.n	8000f0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	3308      	adds	r3, #8
 8000ec8:	623b      	str	r3, [r7, #32]
          break;
 8000eca:	e01f      	b.n	8000f0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	330c      	adds	r3, #12
 8000ed2:	623b      	str	r3, [r7, #32]
          break;
 8000ed4:	e01a      	b.n	8000f0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d102      	bne.n	8000ee4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ede:	2304      	movs	r3, #4
 8000ee0:	623b      	str	r3, [r7, #32]
          break;
 8000ee2:	e013      	b.n	8000f0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d105      	bne.n	8000ef8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000eec:	2308      	movs	r3, #8
 8000eee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	69fa      	ldr	r2, [r7, #28]
 8000ef4:	611a      	str	r2, [r3, #16]
          break;
 8000ef6:	e009      	b.n	8000f0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ef8:	2308      	movs	r3, #8
 8000efa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	69fa      	ldr	r2, [r7, #28]
 8000f00:	615a      	str	r2, [r3, #20]
          break;
 8000f02:	e003      	b.n	8000f0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f04:	2300      	movs	r3, #0
 8000f06:	623b      	str	r3, [r7, #32]
          break;
 8000f08:	e000      	b.n	8000f0c <HAL_GPIO_Init+0x130>
          break;
 8000f0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	2bff      	cmp	r3, #255	; 0xff
 8000f10:	d801      	bhi.n	8000f16 <HAL_GPIO_Init+0x13a>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	e001      	b.n	8000f1a <HAL_GPIO_Init+0x13e>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	3304      	adds	r3, #4
 8000f1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	2bff      	cmp	r3, #255	; 0xff
 8000f20:	d802      	bhi.n	8000f28 <HAL_GPIO_Init+0x14c>
 8000f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	e002      	b.n	8000f2e <HAL_GPIO_Init+0x152>
 8000f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2a:	3b08      	subs	r3, #8
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	210f      	movs	r1, #15
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	401a      	ands	r2, r3
 8000f40:	6a39      	ldr	r1, [r7, #32]
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	fa01 f303 	lsl.w	r3, r1, r3
 8000f48:	431a      	orrs	r2, r3
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	f000 80b1 	beq.w	80010be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f5c:	4b4d      	ldr	r3, [pc, #308]	; (8001094 <HAL_GPIO_Init+0x2b8>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	4a4c      	ldr	r2, [pc, #304]	; (8001094 <HAL_GPIO_Init+0x2b8>)
 8000f62:	f043 0301 	orr.w	r3, r3, #1
 8000f66:	6193      	str	r3, [r2, #24]
 8000f68:	4b4a      	ldr	r3, [pc, #296]	; (8001094 <HAL_GPIO_Init+0x2b8>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	f003 0301 	and.w	r3, r3, #1
 8000f70:	60bb      	str	r3, [r7, #8]
 8000f72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f74:	4a48      	ldr	r2, [pc, #288]	; (8001098 <HAL_GPIO_Init+0x2bc>)
 8000f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f78:	089b      	lsrs	r3, r3, #2
 8000f7a:	3302      	adds	r3, #2
 8000f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f84:	f003 0303 	and.w	r3, r3, #3
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	220f      	movs	r2, #15
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	4013      	ands	r3, r2
 8000f96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a40      	ldr	r2, [pc, #256]	; (800109c <HAL_GPIO_Init+0x2c0>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d013      	beq.n	8000fc8 <HAL_GPIO_Init+0x1ec>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a3f      	ldr	r2, [pc, #252]	; (80010a0 <HAL_GPIO_Init+0x2c4>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d00d      	beq.n	8000fc4 <HAL_GPIO_Init+0x1e8>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4a3e      	ldr	r2, [pc, #248]	; (80010a4 <HAL_GPIO_Init+0x2c8>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d007      	beq.n	8000fc0 <HAL_GPIO_Init+0x1e4>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a3d      	ldr	r2, [pc, #244]	; (80010a8 <HAL_GPIO_Init+0x2cc>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d101      	bne.n	8000fbc <HAL_GPIO_Init+0x1e0>
 8000fb8:	2303      	movs	r3, #3
 8000fba:	e006      	b.n	8000fca <HAL_GPIO_Init+0x1ee>
 8000fbc:	2304      	movs	r3, #4
 8000fbe:	e004      	b.n	8000fca <HAL_GPIO_Init+0x1ee>
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	e002      	b.n	8000fca <HAL_GPIO_Init+0x1ee>
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e000      	b.n	8000fca <HAL_GPIO_Init+0x1ee>
 8000fc8:	2300      	movs	r3, #0
 8000fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fcc:	f002 0203 	and.w	r2, r2, #3
 8000fd0:	0092      	lsls	r2, r2, #2
 8000fd2:	4093      	lsls	r3, r2
 8000fd4:	68fa      	ldr	r2, [r7, #12]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fda:	492f      	ldr	r1, [pc, #188]	; (8001098 <HAL_GPIO_Init+0x2bc>)
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fde:	089b      	lsrs	r3, r3, #2
 8000fe0:	3302      	adds	r3, #2
 8000fe2:	68fa      	ldr	r2, [r7, #12]
 8000fe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d006      	beq.n	8001002 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ff4:	4b2d      	ldr	r3, [pc, #180]	; (80010ac <HAL_GPIO_Init+0x2d0>)
 8000ff6:	689a      	ldr	r2, [r3, #8]
 8000ff8:	492c      	ldr	r1, [pc, #176]	; (80010ac <HAL_GPIO_Init+0x2d0>)
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	608b      	str	r3, [r1, #8]
 8001000:	e006      	b.n	8001010 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001002:	4b2a      	ldr	r3, [pc, #168]	; (80010ac <HAL_GPIO_Init+0x2d0>)
 8001004:	689a      	ldr	r2, [r3, #8]
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	43db      	mvns	r3, r3
 800100a:	4928      	ldr	r1, [pc, #160]	; (80010ac <HAL_GPIO_Init+0x2d0>)
 800100c:	4013      	ands	r3, r2
 800100e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d006      	beq.n	800102a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800101c:	4b23      	ldr	r3, [pc, #140]	; (80010ac <HAL_GPIO_Init+0x2d0>)
 800101e:	68da      	ldr	r2, [r3, #12]
 8001020:	4922      	ldr	r1, [pc, #136]	; (80010ac <HAL_GPIO_Init+0x2d0>)
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	4313      	orrs	r3, r2
 8001026:	60cb      	str	r3, [r1, #12]
 8001028:	e006      	b.n	8001038 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800102a:	4b20      	ldr	r3, [pc, #128]	; (80010ac <HAL_GPIO_Init+0x2d0>)
 800102c:	68da      	ldr	r2, [r3, #12]
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	43db      	mvns	r3, r3
 8001032:	491e      	ldr	r1, [pc, #120]	; (80010ac <HAL_GPIO_Init+0x2d0>)
 8001034:	4013      	ands	r3, r2
 8001036:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d006      	beq.n	8001052 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001044:	4b19      	ldr	r3, [pc, #100]	; (80010ac <HAL_GPIO_Init+0x2d0>)
 8001046:	685a      	ldr	r2, [r3, #4]
 8001048:	4918      	ldr	r1, [pc, #96]	; (80010ac <HAL_GPIO_Init+0x2d0>)
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	4313      	orrs	r3, r2
 800104e:	604b      	str	r3, [r1, #4]
 8001050:	e006      	b.n	8001060 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001052:	4b16      	ldr	r3, [pc, #88]	; (80010ac <HAL_GPIO_Init+0x2d0>)
 8001054:	685a      	ldr	r2, [r3, #4]
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	43db      	mvns	r3, r3
 800105a:	4914      	ldr	r1, [pc, #80]	; (80010ac <HAL_GPIO_Init+0x2d0>)
 800105c:	4013      	ands	r3, r2
 800105e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d021      	beq.n	80010b0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800106c:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <HAL_GPIO_Init+0x2d0>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	490e      	ldr	r1, [pc, #56]	; (80010ac <HAL_GPIO_Init+0x2d0>)
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	4313      	orrs	r3, r2
 8001076:	600b      	str	r3, [r1, #0]
 8001078:	e021      	b.n	80010be <HAL_GPIO_Init+0x2e2>
 800107a:	bf00      	nop
 800107c:	10320000 	.word	0x10320000
 8001080:	10310000 	.word	0x10310000
 8001084:	10220000 	.word	0x10220000
 8001088:	10210000 	.word	0x10210000
 800108c:	10120000 	.word	0x10120000
 8001090:	10110000 	.word	0x10110000
 8001094:	40021000 	.word	0x40021000
 8001098:	40010000 	.word	0x40010000
 800109c:	40010800 	.word	0x40010800
 80010a0:	40010c00 	.word	0x40010c00
 80010a4:	40011000 	.word	0x40011000
 80010a8:	40011400 	.word	0x40011400
 80010ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <HAL_GPIO_Init+0x304>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	43db      	mvns	r3, r3
 80010b8:	4909      	ldr	r1, [pc, #36]	; (80010e0 <HAL_GPIO_Init+0x304>)
 80010ba:	4013      	ands	r3, r2
 80010bc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80010be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c0:	3301      	adds	r3, #1
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ca:	fa22 f303 	lsr.w	r3, r2, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f47f ae8e 	bne.w	8000df0 <HAL_GPIO_Init+0x14>
  }
}
 80010d4:	bf00      	nop
 80010d6:	bf00      	nop
 80010d8:	372c      	adds	r7, #44	; 0x2c
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr
 80010e0:	40010400 	.word	0x40010400

080010e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	460b      	mov	r3, r1
 80010ee:	807b      	strh	r3, [r7, #2]
 80010f0:	4613      	mov	r3, r2
 80010f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010f4:	787b      	ldrb	r3, [r7, #1]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010fa:	887a      	ldrh	r2, [r7, #2]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001100:	e003      	b.n	800110a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001102:	887b      	ldrh	r3, [r7, #2]
 8001104:	041a      	lsls	r2, r3, #16
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	611a      	str	r2, [r3, #16]
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr

08001114 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e272      	b.n	800160c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	2b00      	cmp	r3, #0
 8001130:	f000 8087 	beq.w	8001242 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001134:	4b92      	ldr	r3, [pc, #584]	; (8001380 <HAL_RCC_OscConfig+0x26c>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 030c 	and.w	r3, r3, #12
 800113c:	2b04      	cmp	r3, #4
 800113e:	d00c      	beq.n	800115a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001140:	4b8f      	ldr	r3, [pc, #572]	; (8001380 <HAL_RCC_OscConfig+0x26c>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 030c 	and.w	r3, r3, #12
 8001148:	2b08      	cmp	r3, #8
 800114a:	d112      	bne.n	8001172 <HAL_RCC_OscConfig+0x5e>
 800114c:	4b8c      	ldr	r3, [pc, #560]	; (8001380 <HAL_RCC_OscConfig+0x26c>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001158:	d10b      	bne.n	8001172 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800115a:	4b89      	ldr	r3, [pc, #548]	; (8001380 <HAL_RCC_OscConfig+0x26c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d06c      	beq.n	8001240 <HAL_RCC_OscConfig+0x12c>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d168      	bne.n	8001240 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e24c      	b.n	800160c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800117a:	d106      	bne.n	800118a <HAL_RCC_OscConfig+0x76>
 800117c:	4b80      	ldr	r3, [pc, #512]	; (8001380 <HAL_RCC_OscConfig+0x26c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a7f      	ldr	r2, [pc, #508]	; (8001380 <HAL_RCC_OscConfig+0x26c>)
 8001182:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001186:	6013      	str	r3, [r2, #0]
 8001188:	e02e      	b.n	80011e8 <HAL_RCC_OscConfig+0xd4>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d10c      	bne.n	80011ac <HAL_RCC_OscConfig+0x98>
 8001192:	4b7b      	ldr	r3, [pc, #492]	; (8001380 <HAL_RCC_OscConfig+0x26c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a7a      	ldr	r2, [pc, #488]	; (8001380 <HAL_RCC_OscConfig+0x26c>)
 8001198:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800119c:	6013      	str	r3, [r2, #0]
 800119e:	4b78      	ldr	r3, [pc, #480]	; (8001380 <HAL_RCC_OscConfig+0x26c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a77      	ldr	r2, [pc, #476]	; (8001380 <HAL_RCC_OscConfig+0x26c>)
 80011a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011a8:	6013      	str	r3, [r2, #0]
 80011aa:	e01d      	b.n	80011e8 <HAL_RCC_OscConfig+0xd4>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011b4:	d10c      	bne.n	80011d0 <HAL_RCC_OscConfig+0xbc>
 80011b6:	4b72      	ldr	r3, [pc, #456]	; (8001380 <HAL_RCC_OscConfig+0x26c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a71      	ldr	r2, [pc, #452]	; (8001380 <HAL_RCC_OscConfig+0x26c>)
 80011bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011c0:	6013      	str	r3, [r2, #0]
 80011c2:	4b6f      	ldr	r3, [pc, #444]	; (8001380 <HAL_RCC_OscConfig+0x26c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a6e      	ldr	r2, [pc, #440]	; (8001380 <HAL_RCC_OscConfig+0x26c>)
 80011c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011cc:	6013      	str	r3, [r2, #0]
 80011ce:	e00b      	b.n	80011e8 <HAL_RCC_OscConfig+0xd4>
 80011d0:	4b6b      	ldr	r3, [pc, #428]	; (8001380 <HAL_RCC_OscConfig+0x26c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a6a      	ldr	r2, [pc, #424]	; (8001380 <HAL_RCC_OscConfig+0x26c>)
 80011d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011da:	6013      	str	r3, [r2, #0]
 80011dc:	4b68      	ldr	r3, [pc, #416]	; (8001380 <HAL_RCC_OscConfig+0x26c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a67      	ldr	r2, [pc, #412]	; (8001380 <HAL_RCC_OscConfig+0x26c>)
 80011e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d013      	beq.n	8001218 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f0:	f7ff fce2 	bl	8000bb8 <HAL_GetTick>
 80011f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f6:	e008      	b.n	800120a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011f8:	f7ff fcde 	bl	8000bb8 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b64      	cmp	r3, #100	; 0x64
 8001204:	d901      	bls.n	800120a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e200      	b.n	800160c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800120a:	4b5d      	ldr	r3, [pc, #372]	; (8001380 <HAL_RCC_OscConfig+0x26c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d0f0      	beq.n	80011f8 <HAL_RCC_OscConfig+0xe4>
 8001216:	e014      	b.n	8001242 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001218:	f7ff fcce 	bl	8000bb8 <HAL_GetTick>
 800121c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800121e:	e008      	b.n	8001232 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001220:	f7ff fcca 	bl	8000bb8 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b64      	cmp	r3, #100	; 0x64
 800122c:	d901      	bls.n	8001232 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e1ec      	b.n	800160c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001232:	4b53      	ldr	r3, [pc, #332]	; (8001380 <HAL_RCC_OscConfig+0x26c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1f0      	bne.n	8001220 <HAL_RCC_OscConfig+0x10c>
 800123e:	e000      	b.n	8001242 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001240:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d063      	beq.n	8001316 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800124e:	4b4c      	ldr	r3, [pc, #304]	; (8001380 <HAL_RCC_OscConfig+0x26c>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f003 030c 	and.w	r3, r3, #12
 8001256:	2b00      	cmp	r3, #0
 8001258:	d00b      	beq.n	8001272 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800125a:	4b49      	ldr	r3, [pc, #292]	; (8001380 <HAL_RCC_OscConfig+0x26c>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f003 030c 	and.w	r3, r3, #12
 8001262:	2b08      	cmp	r3, #8
 8001264:	d11c      	bne.n	80012a0 <HAL_RCC_OscConfig+0x18c>
 8001266:	4b46      	ldr	r3, [pc, #280]	; (8001380 <HAL_RCC_OscConfig+0x26c>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d116      	bne.n	80012a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001272:	4b43      	ldr	r3, [pc, #268]	; (8001380 <HAL_RCC_OscConfig+0x26c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d005      	beq.n	800128a <HAL_RCC_OscConfig+0x176>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d001      	beq.n	800128a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e1c0      	b.n	800160c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800128a:	4b3d      	ldr	r3, [pc, #244]	; (8001380 <HAL_RCC_OscConfig+0x26c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	4939      	ldr	r1, [pc, #228]	; (8001380 <HAL_RCC_OscConfig+0x26c>)
 800129a:	4313      	orrs	r3, r2
 800129c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800129e:	e03a      	b.n	8001316 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	691b      	ldr	r3, [r3, #16]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d020      	beq.n	80012ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012a8:	4b36      	ldr	r3, [pc, #216]	; (8001384 <HAL_RCC_OscConfig+0x270>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ae:	f7ff fc83 	bl	8000bb8 <HAL_GetTick>
 80012b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b4:	e008      	b.n	80012c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012b6:	f7ff fc7f 	bl	8000bb8 <HAL_GetTick>
 80012ba:	4602      	mov	r2, r0
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d901      	bls.n	80012c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e1a1      	b.n	800160c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c8:	4b2d      	ldr	r3, [pc, #180]	; (8001380 <HAL_RCC_OscConfig+0x26c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d0f0      	beq.n	80012b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d4:	4b2a      	ldr	r3, [pc, #168]	; (8001380 <HAL_RCC_OscConfig+0x26c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	695b      	ldr	r3, [r3, #20]
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	4927      	ldr	r1, [pc, #156]	; (8001380 <HAL_RCC_OscConfig+0x26c>)
 80012e4:	4313      	orrs	r3, r2
 80012e6:	600b      	str	r3, [r1, #0]
 80012e8:	e015      	b.n	8001316 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012ea:	4b26      	ldr	r3, [pc, #152]	; (8001384 <HAL_RCC_OscConfig+0x270>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f0:	f7ff fc62 	bl	8000bb8 <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012f8:	f7ff fc5e 	bl	8000bb8 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e180      	b.n	800160c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800130a:	4b1d      	ldr	r3, [pc, #116]	; (8001380 <HAL_RCC_OscConfig+0x26c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1f0      	bne.n	80012f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0308 	and.w	r3, r3, #8
 800131e:	2b00      	cmp	r3, #0
 8001320:	d03a      	beq.n	8001398 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d019      	beq.n	800135e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800132a:	4b17      	ldr	r3, [pc, #92]	; (8001388 <HAL_RCC_OscConfig+0x274>)
 800132c:	2201      	movs	r2, #1
 800132e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001330:	f7ff fc42 	bl	8000bb8 <HAL_GetTick>
 8001334:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001336:	e008      	b.n	800134a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001338:	f7ff fc3e 	bl	8000bb8 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b02      	cmp	r3, #2
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e160      	b.n	800160c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800134a:	4b0d      	ldr	r3, [pc, #52]	; (8001380 <HAL_RCC_OscConfig+0x26c>)
 800134c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d0f0      	beq.n	8001338 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001356:	2001      	movs	r0, #1
 8001358:	f000 fa9c 	bl	8001894 <RCC_Delay>
 800135c:	e01c      	b.n	8001398 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800135e:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <HAL_RCC_OscConfig+0x274>)
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001364:	f7ff fc28 	bl	8000bb8 <HAL_GetTick>
 8001368:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800136a:	e00f      	b.n	800138c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800136c:	f7ff fc24 	bl	8000bb8 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b02      	cmp	r3, #2
 8001378:	d908      	bls.n	800138c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e146      	b.n	800160c <HAL_RCC_OscConfig+0x4f8>
 800137e:	bf00      	nop
 8001380:	40021000 	.word	0x40021000
 8001384:	42420000 	.word	0x42420000
 8001388:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800138c:	4b92      	ldr	r3, [pc, #584]	; (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 800138e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d1e9      	bne.n	800136c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0304 	and.w	r3, r3, #4
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f000 80a6 	beq.w	80014f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013a6:	2300      	movs	r3, #0
 80013a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013aa:	4b8b      	ldr	r3, [pc, #556]	; (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d10d      	bne.n	80013d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013b6:	4b88      	ldr	r3, [pc, #544]	; (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	4a87      	ldr	r2, [pc, #540]	; (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 80013bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c0:	61d3      	str	r3, [r2, #28]
 80013c2:	4b85      	ldr	r3, [pc, #532]	; (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013ce:	2301      	movs	r3, #1
 80013d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d2:	4b82      	ldr	r3, [pc, #520]	; (80015dc <HAL_RCC_OscConfig+0x4c8>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d118      	bne.n	8001410 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013de:	4b7f      	ldr	r3, [pc, #508]	; (80015dc <HAL_RCC_OscConfig+0x4c8>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a7e      	ldr	r2, [pc, #504]	; (80015dc <HAL_RCC_OscConfig+0x4c8>)
 80013e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013ea:	f7ff fbe5 	bl	8000bb8 <HAL_GetTick>
 80013ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f0:	e008      	b.n	8001404 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013f2:	f7ff fbe1 	bl	8000bb8 <HAL_GetTick>
 80013f6:	4602      	mov	r2, r0
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b64      	cmp	r3, #100	; 0x64
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e103      	b.n	800160c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001404:	4b75      	ldr	r3, [pc, #468]	; (80015dc <HAL_RCC_OscConfig+0x4c8>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800140c:	2b00      	cmp	r3, #0
 800140e:	d0f0      	beq.n	80013f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d106      	bne.n	8001426 <HAL_RCC_OscConfig+0x312>
 8001418:	4b6f      	ldr	r3, [pc, #444]	; (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 800141a:	6a1b      	ldr	r3, [r3, #32]
 800141c:	4a6e      	ldr	r2, [pc, #440]	; (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	6213      	str	r3, [r2, #32]
 8001424:	e02d      	b.n	8001482 <HAL_RCC_OscConfig+0x36e>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d10c      	bne.n	8001448 <HAL_RCC_OscConfig+0x334>
 800142e:	4b6a      	ldr	r3, [pc, #424]	; (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 8001430:	6a1b      	ldr	r3, [r3, #32]
 8001432:	4a69      	ldr	r2, [pc, #420]	; (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 8001434:	f023 0301 	bic.w	r3, r3, #1
 8001438:	6213      	str	r3, [r2, #32]
 800143a:	4b67      	ldr	r3, [pc, #412]	; (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 800143c:	6a1b      	ldr	r3, [r3, #32]
 800143e:	4a66      	ldr	r2, [pc, #408]	; (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 8001440:	f023 0304 	bic.w	r3, r3, #4
 8001444:	6213      	str	r3, [r2, #32]
 8001446:	e01c      	b.n	8001482 <HAL_RCC_OscConfig+0x36e>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	2b05      	cmp	r3, #5
 800144e:	d10c      	bne.n	800146a <HAL_RCC_OscConfig+0x356>
 8001450:	4b61      	ldr	r3, [pc, #388]	; (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 8001452:	6a1b      	ldr	r3, [r3, #32]
 8001454:	4a60      	ldr	r2, [pc, #384]	; (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 8001456:	f043 0304 	orr.w	r3, r3, #4
 800145a:	6213      	str	r3, [r2, #32]
 800145c:	4b5e      	ldr	r3, [pc, #376]	; (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 800145e:	6a1b      	ldr	r3, [r3, #32]
 8001460:	4a5d      	ldr	r2, [pc, #372]	; (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 8001462:	f043 0301 	orr.w	r3, r3, #1
 8001466:	6213      	str	r3, [r2, #32]
 8001468:	e00b      	b.n	8001482 <HAL_RCC_OscConfig+0x36e>
 800146a:	4b5b      	ldr	r3, [pc, #364]	; (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 800146c:	6a1b      	ldr	r3, [r3, #32]
 800146e:	4a5a      	ldr	r2, [pc, #360]	; (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 8001470:	f023 0301 	bic.w	r3, r3, #1
 8001474:	6213      	str	r3, [r2, #32]
 8001476:	4b58      	ldr	r3, [pc, #352]	; (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 8001478:	6a1b      	ldr	r3, [r3, #32]
 800147a:	4a57      	ldr	r2, [pc, #348]	; (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 800147c:	f023 0304 	bic.w	r3, r3, #4
 8001480:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d015      	beq.n	80014b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800148a:	f7ff fb95 	bl	8000bb8 <HAL_GetTick>
 800148e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001490:	e00a      	b.n	80014a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001492:	f7ff fb91 	bl	8000bb8 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e0b1      	b.n	800160c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a8:	4b4b      	ldr	r3, [pc, #300]	; (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 80014aa:	6a1b      	ldr	r3, [r3, #32]
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0ee      	beq.n	8001492 <HAL_RCC_OscConfig+0x37e>
 80014b4:	e014      	b.n	80014e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b6:	f7ff fb7f 	bl	8000bb8 <HAL_GetTick>
 80014ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014bc:	e00a      	b.n	80014d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014be:	f7ff fb7b 	bl	8000bb8 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e09b      	b.n	800160c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014d4:	4b40      	ldr	r3, [pc, #256]	; (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1ee      	bne.n	80014be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80014e0:	7dfb      	ldrb	r3, [r7, #23]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d105      	bne.n	80014f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014e6:	4b3c      	ldr	r3, [pc, #240]	; (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	4a3b      	ldr	r2, [pc, #236]	; (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 80014ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f000 8087 	beq.w	800160a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014fc:	4b36      	ldr	r3, [pc, #216]	; (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 030c 	and.w	r3, r3, #12
 8001504:	2b08      	cmp	r3, #8
 8001506:	d061      	beq.n	80015cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	69db      	ldr	r3, [r3, #28]
 800150c:	2b02      	cmp	r3, #2
 800150e:	d146      	bne.n	800159e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001510:	4b33      	ldr	r3, [pc, #204]	; (80015e0 <HAL_RCC_OscConfig+0x4cc>)
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001516:	f7ff fb4f 	bl	8000bb8 <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800151e:	f7ff fb4b 	bl	8000bb8 <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e06d      	b.n	800160c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001530:	4b29      	ldr	r3, [pc, #164]	; (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1f0      	bne.n	800151e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a1b      	ldr	r3, [r3, #32]
 8001540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001544:	d108      	bne.n	8001558 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001546:	4b24      	ldr	r3, [pc, #144]	; (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	4921      	ldr	r1, [pc, #132]	; (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 8001554:	4313      	orrs	r3, r2
 8001556:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001558:	4b1f      	ldr	r3, [pc, #124]	; (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a19      	ldr	r1, [r3, #32]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001568:	430b      	orrs	r3, r1
 800156a:	491b      	ldr	r1, [pc, #108]	; (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 800156c:	4313      	orrs	r3, r2
 800156e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001570:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <HAL_RCC_OscConfig+0x4cc>)
 8001572:	2201      	movs	r2, #1
 8001574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001576:	f7ff fb1f 	bl	8000bb8 <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800157e:	f7ff fb1b 	bl	8000bb8 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e03d      	b.n	800160c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001590:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d0f0      	beq.n	800157e <HAL_RCC_OscConfig+0x46a>
 800159c:	e035      	b.n	800160a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800159e:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <HAL_RCC_OscConfig+0x4cc>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a4:	f7ff fb08 	bl	8000bb8 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ac:	f7ff fb04 	bl	8000bb8 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e026      	b.n	800160c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f0      	bne.n	80015ac <HAL_RCC_OscConfig+0x498>
 80015ca:	e01e      	b.n	800160a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	69db      	ldr	r3, [r3, #28]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d107      	bne.n	80015e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e019      	b.n	800160c <HAL_RCC_OscConfig+0x4f8>
 80015d8:	40021000 	.word	0x40021000
 80015dc:	40007000 	.word	0x40007000
 80015e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015e4:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <HAL_RCC_OscConfig+0x500>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a1b      	ldr	r3, [r3, #32]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d106      	bne.n	8001606 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001602:	429a      	cmp	r2, r3
 8001604:	d001      	beq.n	800160a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e000      	b.n	800160c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40021000 	.word	0x40021000

08001618 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d101      	bne.n	800162c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e0d0      	b.n	80017ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800162c:	4b6a      	ldr	r3, [pc, #424]	; (80017d8 <HAL_RCC_ClockConfig+0x1c0>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0307 	and.w	r3, r3, #7
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	429a      	cmp	r2, r3
 8001638:	d910      	bls.n	800165c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800163a:	4b67      	ldr	r3, [pc, #412]	; (80017d8 <HAL_RCC_ClockConfig+0x1c0>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f023 0207 	bic.w	r2, r3, #7
 8001642:	4965      	ldr	r1, [pc, #404]	; (80017d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	4313      	orrs	r3, r2
 8001648:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800164a:	4b63      	ldr	r3, [pc, #396]	; (80017d8 <HAL_RCC_ClockConfig+0x1c0>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	429a      	cmp	r2, r3
 8001656:	d001      	beq.n	800165c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e0b8      	b.n	80017ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d020      	beq.n	80016aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0304 	and.w	r3, r3, #4
 8001670:	2b00      	cmp	r3, #0
 8001672:	d005      	beq.n	8001680 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001674:	4b59      	ldr	r3, [pc, #356]	; (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	4a58      	ldr	r2, [pc, #352]	; (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 800167a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800167e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0308 	and.w	r3, r3, #8
 8001688:	2b00      	cmp	r3, #0
 800168a:	d005      	beq.n	8001698 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800168c:	4b53      	ldr	r3, [pc, #332]	; (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	4a52      	ldr	r2, [pc, #328]	; (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 8001692:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001696:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001698:	4b50      	ldr	r3, [pc, #320]	; (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	494d      	ldr	r1, [pc, #308]	; (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d040      	beq.n	8001738 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d107      	bne.n	80016ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016be:	4b47      	ldr	r3, [pc, #284]	; (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d115      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e07f      	b.n	80017ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d107      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d6:	4b41      	ldr	r3, [pc, #260]	; (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d109      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e073      	b.n	80017ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e6:	4b3d      	ldr	r3, [pc, #244]	; (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e06b      	b.n	80017ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016f6:	4b39      	ldr	r3, [pc, #228]	; (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f023 0203 	bic.w	r2, r3, #3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	4936      	ldr	r1, [pc, #216]	; (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 8001704:	4313      	orrs	r3, r2
 8001706:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001708:	f7ff fa56 	bl	8000bb8 <HAL_GetTick>
 800170c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800170e:	e00a      	b.n	8001726 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001710:	f7ff fa52 	bl	8000bb8 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	f241 3288 	movw	r2, #5000	; 0x1388
 800171e:	4293      	cmp	r3, r2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e053      	b.n	80017ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001726:	4b2d      	ldr	r3, [pc, #180]	; (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f003 020c 	and.w	r2, r3, #12
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	429a      	cmp	r2, r3
 8001736:	d1eb      	bne.n	8001710 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001738:	4b27      	ldr	r3, [pc, #156]	; (80017d8 <HAL_RCC_ClockConfig+0x1c0>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0307 	and.w	r3, r3, #7
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	429a      	cmp	r2, r3
 8001744:	d210      	bcs.n	8001768 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001746:	4b24      	ldr	r3, [pc, #144]	; (80017d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f023 0207 	bic.w	r2, r3, #7
 800174e:	4922      	ldr	r1, [pc, #136]	; (80017d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	4313      	orrs	r3, r2
 8001754:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001756:	4b20      	ldr	r3, [pc, #128]	; (80017d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	429a      	cmp	r2, r3
 8001762:	d001      	beq.n	8001768 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e032      	b.n	80017ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0304 	and.w	r3, r3, #4
 8001770:	2b00      	cmp	r3, #0
 8001772:	d008      	beq.n	8001786 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001774:	4b19      	ldr	r3, [pc, #100]	; (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	4916      	ldr	r1, [pc, #88]	; (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 8001782:	4313      	orrs	r3, r2
 8001784:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0308 	and.w	r3, r3, #8
 800178e:	2b00      	cmp	r3, #0
 8001790:	d009      	beq.n	80017a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001792:	4b12      	ldr	r3, [pc, #72]	; (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	490e      	ldr	r1, [pc, #56]	; (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017a6:	f000 f821 	bl	80017ec <HAL_RCC_GetSysClockFreq>
 80017aa:	4602      	mov	r2, r0
 80017ac:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	091b      	lsrs	r3, r3, #4
 80017b2:	f003 030f 	and.w	r3, r3, #15
 80017b6:	490a      	ldr	r1, [pc, #40]	; (80017e0 <HAL_RCC_ClockConfig+0x1c8>)
 80017b8:	5ccb      	ldrb	r3, [r1, r3]
 80017ba:	fa22 f303 	lsr.w	r3, r2, r3
 80017be:	4a09      	ldr	r2, [pc, #36]	; (80017e4 <HAL_RCC_ClockConfig+0x1cc>)
 80017c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017c2:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <HAL_RCC_ClockConfig+0x1d0>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff f9b4 	bl	8000b34 <HAL_InitTick>

  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40022000 	.word	0x40022000
 80017dc:	40021000 	.word	0x40021000
 80017e0:	0800d4d0 	.word	0x0800d4d0
 80017e4:	20000008 	.word	0x20000008
 80017e8:	2000000c 	.word	0x2000000c

080017ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b087      	sub	sp, #28
 80017f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	2300      	movs	r3, #0
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]
 80017fe:	2300      	movs	r3, #0
 8001800:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001802:	2300      	movs	r3, #0
 8001804:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001806:	4b1e      	ldr	r3, [pc, #120]	; (8001880 <HAL_RCC_GetSysClockFreq+0x94>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f003 030c 	and.w	r3, r3, #12
 8001812:	2b04      	cmp	r3, #4
 8001814:	d002      	beq.n	800181c <HAL_RCC_GetSysClockFreq+0x30>
 8001816:	2b08      	cmp	r3, #8
 8001818:	d003      	beq.n	8001822 <HAL_RCC_GetSysClockFreq+0x36>
 800181a:	e027      	b.n	800186c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800181c:	4b19      	ldr	r3, [pc, #100]	; (8001884 <HAL_RCC_GetSysClockFreq+0x98>)
 800181e:	613b      	str	r3, [r7, #16]
      break;
 8001820:	e027      	b.n	8001872 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	0c9b      	lsrs	r3, r3, #18
 8001826:	f003 030f 	and.w	r3, r3, #15
 800182a:	4a17      	ldr	r2, [pc, #92]	; (8001888 <HAL_RCC_GetSysClockFreq+0x9c>)
 800182c:	5cd3      	ldrb	r3, [r2, r3]
 800182e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d010      	beq.n	800185c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800183a:	4b11      	ldr	r3, [pc, #68]	; (8001880 <HAL_RCC_GetSysClockFreq+0x94>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	0c5b      	lsrs	r3, r3, #17
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	4a11      	ldr	r2, [pc, #68]	; (800188c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001846:	5cd3      	ldrb	r3, [r2, r3]
 8001848:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a0d      	ldr	r2, [pc, #52]	; (8001884 <HAL_RCC_GetSysClockFreq+0x98>)
 800184e:	fb03 f202 	mul.w	r2, r3, r2
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	fbb2 f3f3 	udiv	r3, r2, r3
 8001858:	617b      	str	r3, [r7, #20]
 800185a:	e004      	b.n	8001866 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a0c      	ldr	r2, [pc, #48]	; (8001890 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001860:	fb02 f303 	mul.w	r3, r2, r3
 8001864:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	613b      	str	r3, [r7, #16]
      break;
 800186a:	e002      	b.n	8001872 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800186c:	4b05      	ldr	r3, [pc, #20]	; (8001884 <HAL_RCC_GetSysClockFreq+0x98>)
 800186e:	613b      	str	r3, [r7, #16]
      break;
 8001870:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001872:	693b      	ldr	r3, [r7, #16]
}
 8001874:	4618      	mov	r0, r3
 8001876:	371c      	adds	r7, #28
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	40021000 	.word	0x40021000
 8001884:	007a1200 	.word	0x007a1200
 8001888:	0800d4e0 	.word	0x0800d4e0
 800188c:	0800d4f0 	.word	0x0800d4f0
 8001890:	003d0900 	.word	0x003d0900

08001894 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800189c:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <RCC_Delay+0x34>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a0a      	ldr	r2, [pc, #40]	; (80018cc <RCC_Delay+0x38>)
 80018a2:	fba2 2303 	umull	r2, r3, r2, r3
 80018a6:	0a5b      	lsrs	r3, r3, #9
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	fb02 f303 	mul.w	r3, r2, r3
 80018ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018b0:	bf00      	nop
  }
  while (Delay --);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	1e5a      	subs	r2, r3, #1
 80018b6:	60fa      	str	r2, [r7, #12]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1f9      	bne.n	80018b0 <RCC_Delay+0x1c>
}
 80018bc:	bf00      	nop
 80018be:	bf00      	nop
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr
 80018c8:	20000008 	.word	0x20000008
 80018cc:	10624dd3 	.word	0x10624dd3

080018d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e076      	b.n	80019d0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d108      	bne.n	80018fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80018f2:	d009      	beq.n	8001908 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	61da      	str	r2, [r3, #28]
 80018fa:	e005      	b.n	8001908 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d106      	bne.n	8001928 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff f85e 	bl	80009e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2202      	movs	r2, #2
 800192c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800193e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001950:	431a      	orrs	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800195a:	431a      	orrs	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	431a      	orrs	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	431a      	orrs	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001978:	431a      	orrs	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001982:	431a      	orrs	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800198c:	ea42 0103 	orr.w	r1, r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001994:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	430a      	orrs	r2, r1
 800199e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	0c1a      	lsrs	r2, r3, #16
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f002 0204 	and.w	r2, r2, #4
 80019ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	69da      	ldr	r2, [r3, #28]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2201      	movs	r2, #1
 80019ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b088      	sub	sp, #32
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	603b      	str	r3, [r7, #0]
 80019e4:	4613      	mov	r3, r2
 80019e6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80019e8:	2300      	movs	r3, #0
 80019ea:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d101      	bne.n	80019fa <HAL_SPI_Transmit+0x22>
 80019f6:	2302      	movs	r3, #2
 80019f8:	e12d      	b.n	8001c56 <HAL_SPI_Transmit+0x27e>
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a02:	f7ff f8d9 	bl	8000bb8 <HAL_GetTick>
 8001a06:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001a08:	88fb      	ldrh	r3, [r7, #6]
 8001a0a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d002      	beq.n	8001a1e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001a1c:	e116      	b.n	8001c4c <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d002      	beq.n	8001a2a <HAL_SPI_Transmit+0x52>
 8001a24:	88fb      	ldrh	r3, [r7, #6]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d102      	bne.n	8001a30 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001a2e:	e10d      	b.n	8001c4c <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2203      	movs	r2, #3
 8001a34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	68ba      	ldr	r2, [r7, #8]
 8001a42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	88fa      	ldrh	r2, [r7, #6]
 8001a48:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	88fa      	ldrh	r2, [r7, #6]
 8001a4e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2200      	movs	r2, #0
 8001a54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2200      	movs	r2, #0
 8001a66:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a76:	d10f      	bne.n	8001a98 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a86:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a96:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aa2:	2b40      	cmp	r3, #64	; 0x40
 8001aa4:	d007      	beq.n	8001ab6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ab4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001abe:	d14f      	bne.n	8001b60 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d002      	beq.n	8001ace <HAL_SPI_Transmit+0xf6>
 8001ac8:	8afb      	ldrh	r3, [r7, #22]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d142      	bne.n	8001b54 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	881a      	ldrh	r2, [r3, #0]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	1c9a      	adds	r2, r3, #2
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	3b01      	subs	r3, #1
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001af2:	e02f      	b.n	8001b54 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d112      	bne.n	8001b28 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	881a      	ldrh	r2, [r3, #0]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	1c9a      	adds	r2, r3, #2
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	86da      	strh	r2, [r3, #54]	; 0x36
 8001b26:	e015      	b.n	8001b54 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b28:	f7ff f846 	bl	8000bb8 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d803      	bhi.n	8001b40 <HAL_SPI_Transmit+0x168>
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b3e:	d102      	bne.n	8001b46 <HAL_SPI_Transmit+0x16e>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d106      	bne.n	8001b54 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001b52:	e07b      	b.n	8001c4c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1ca      	bne.n	8001af4 <HAL_SPI_Transmit+0x11c>
 8001b5e:	e050      	b.n	8001c02 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d002      	beq.n	8001b6e <HAL_SPI_Transmit+0x196>
 8001b68:	8afb      	ldrh	r3, [r7, #22]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d144      	bne.n	8001bf8 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	330c      	adds	r3, #12
 8001b78:	7812      	ldrb	r2, [r2, #0]
 8001b7a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b80:	1c5a      	adds	r2, r3, #1
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001b94:	e030      	b.n	8001bf8 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d113      	bne.n	8001bcc <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	330c      	adds	r3, #12
 8001bae:	7812      	ldrb	r2, [r2, #0]
 8001bb0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	1c5a      	adds	r2, r3, #1
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	86da      	strh	r2, [r3, #54]	; 0x36
 8001bca:	e015      	b.n	8001bf8 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001bcc:	f7fe fff4 	bl	8000bb8 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d803      	bhi.n	8001be4 <HAL_SPI_Transmit+0x20c>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be2:	d102      	bne.n	8001bea <HAL_SPI_Transmit+0x212>
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d106      	bne.n	8001bf8 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001bf6:	e029      	b.n	8001c4c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1c9      	bne.n	8001b96 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	6839      	ldr	r1, [r7, #0]
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f000 f8b2 	bl	8001d70 <SPI_EndRxTxTransaction>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d002      	beq.n	8001c18 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2220      	movs	r2, #32
 8001c16:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d10a      	bne.n	8001c36 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c20:	2300      	movs	r3, #0
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	613b      	str	r3, [r7, #16]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	613b      	str	r3, [r7, #16]
 8001c34:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d002      	beq.n	8001c44 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	77fb      	strb	r3, [r7, #31]
 8001c42:	e003      	b.n	8001c4c <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001c54:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3720      	adds	r7, #32
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b088      	sub	sp, #32
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	603b      	str	r3, [r7, #0]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001c70:	f7fe ffa2 	bl	8000bb8 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c78:	1a9b      	subs	r3, r3, r2
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001c80:	f7fe ff9a 	bl	8000bb8 <HAL_GetTick>
 8001c84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001c86:	4b39      	ldr	r3, [pc, #228]	; (8001d6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	015b      	lsls	r3, r3, #5
 8001c8c:	0d1b      	lsrs	r3, r3, #20
 8001c8e:	69fa      	ldr	r2, [r7, #28]
 8001c90:	fb02 f303 	mul.w	r3, r2, r3
 8001c94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001c96:	e054      	b.n	8001d42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c9e:	d050      	beq.n	8001d42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001ca0:	f7fe ff8a 	bl	8000bb8 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	69fa      	ldr	r2, [r7, #28]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d902      	bls.n	8001cb6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d13d      	bne.n	8001d32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001cc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001cce:	d111      	bne.n	8001cf4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cd8:	d004      	beq.n	8001ce4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ce2:	d107      	bne.n	8001cf4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cf2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cfc:	d10f      	bne.n	8001d1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e017      	b.n	8001d62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d101      	bne.n	8001d3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	68ba      	ldr	r2, [r7, #8]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	bf0c      	ite	eq
 8001d52:	2301      	moveq	r3, #1
 8001d54:	2300      	movne	r3, #0
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	461a      	mov	r2, r3
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d19b      	bne.n	8001c98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3720      	adds	r7, #32
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000008 	.word	0x20000008

08001d70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af02      	add	r7, sp, #8
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	9300      	str	r3, [sp, #0]
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	2200      	movs	r2, #0
 8001d84:	2180      	movs	r1, #128	; 0x80
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	f7ff ff6a 	bl	8001c60 <SPI_WaitFlagStateUntilTimeout>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d007      	beq.n	8001da2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d96:	f043 0220 	orr.w	r2, r3, #32
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e000      	b.n	8001da4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <__libc_init_array>:
 8001dac:	b570      	push	{r4, r5, r6, lr}
 8001dae:	2600      	movs	r6, #0
 8001db0:	4d0c      	ldr	r5, [pc, #48]	; (8001de4 <__libc_init_array+0x38>)
 8001db2:	4c0d      	ldr	r4, [pc, #52]	; (8001de8 <__libc_init_array+0x3c>)
 8001db4:	1b64      	subs	r4, r4, r5
 8001db6:	10a4      	asrs	r4, r4, #2
 8001db8:	42a6      	cmp	r6, r4
 8001dba:	d109      	bne.n	8001dd0 <__libc_init_array+0x24>
 8001dbc:	f000 f822 	bl	8001e04 <_init>
 8001dc0:	2600      	movs	r6, #0
 8001dc2:	4d0a      	ldr	r5, [pc, #40]	; (8001dec <__libc_init_array+0x40>)
 8001dc4:	4c0a      	ldr	r4, [pc, #40]	; (8001df0 <__libc_init_array+0x44>)
 8001dc6:	1b64      	subs	r4, r4, r5
 8001dc8:	10a4      	asrs	r4, r4, #2
 8001dca:	42a6      	cmp	r6, r4
 8001dcc:	d105      	bne.n	8001dda <__libc_init_array+0x2e>
 8001dce:	bd70      	pop	{r4, r5, r6, pc}
 8001dd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dd4:	4798      	blx	r3
 8001dd6:	3601      	adds	r6, #1
 8001dd8:	e7ee      	b.n	8001db8 <__libc_init_array+0xc>
 8001dda:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dde:	4798      	blx	r3
 8001de0:	3601      	adds	r6, #1
 8001de2:	e7f2      	b.n	8001dca <__libc_init_array+0x1e>
 8001de4:	0800d4f4 	.word	0x0800d4f4
 8001de8:	0800d4f4 	.word	0x0800d4f4
 8001dec:	0800d4f4 	.word	0x0800d4f4
 8001df0:	0800d4f8 	.word	0x0800d4f8

08001df4 <memset>:
 8001df4:	4603      	mov	r3, r0
 8001df6:	4402      	add	r2, r0
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d100      	bne.n	8001dfe <memset+0xa>
 8001dfc:	4770      	bx	lr
 8001dfe:	f803 1b01 	strb.w	r1, [r3], #1
 8001e02:	e7f9      	b.n	8001df8 <memset+0x4>

08001e04 <_init>:
 8001e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e06:	bf00      	nop
 8001e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e0a:	bc08      	pop	{r3}
 8001e0c:	469e      	mov	lr, r3
 8001e0e:	4770      	bx	lr

08001e10 <_fini>:
 8001e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e12:	bf00      	nop
 8001e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e16:	bc08      	pop	{r3}
 8001e18:	469e      	mov	lr, r3
 8001e1a:	4770      	bx	lr
